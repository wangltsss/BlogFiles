<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Concurrent System Study Notes(Continuing...)</title>
      <link href="/2022/01/26/ConcurrentNotes/"/>
      <url>/2022/01/26/ConcurrentNotes/</url>
      
        <content type="html"><![CDATA[<h1 id="signals">Signals</h1><h2 id="signal-lifespan">Signal Lifespan</h2><p>A <strong>signal</strong> is <strong>generated</strong> when a relevant event happens, and is <strong>delivered</strong> when the target process receves it. The lifespan of a signal is from its generation to its delivery.</p><span id="more"></span><h2 id="signal-block-vs.-signal-ignore">Signal Block vs. Signal Ignore</h2><p>When a process <strong>blocks</strong> a signal, the signal is pending to be unblocked. It is <strong>not delivered</strong> while being blocked.</br></p><p>Whereas when a process <strong>ignores</strong> a signal, the signal <strong>is delivered</strong>, but the process does not respond to the signal.</p><h2 id="signal-mask">Signal Mask</h2><p><strong>Signal mask</strong> is a set of signals that will be blocked.</br></p><p>A signal mask is of type <code>sigset_t</code>.</br></p><p>To add/remove signals to/from a signal mask:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sigset_t</span> mymask;</span><br><span class="line"></span><br><span class="line">sigemptyset(&amp;mymask);\\ Set the custom mask to contain no signals.</span><br><span class="line">sigaddset(&amp;mymask, SIGINT);\\ Set the custom mask to contain SIGINT.</span><br><span class="line">sigdelset(&amp;mymask, SIGINT);\\ Set the custom mask to <span class="keyword">delete</span> SIGINT.</span><br><span class="line">sigfillset(&amp;mymask);\\ Set the custom mask to contain all the signals.</span><br></pre></td></tr></table></figure><p>Then, to make a signal mask effective, call the <code>sigprocmask()</code> function:</br> (To learn details of <code>sigprocmask()</code>, refer to its <a href="https://man7.org/linux/man-pages/man2/sigprocmask.2.html#top_of_page">man page</a>.)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sigprocmask(SIG_BLOCK, &amp;mymask, <span class="literal">NULL</span>);\\ Add signals in <span class="string">&quot;mymask&quot;</span> to block <span class="built_in">list</span>. </span><br></pre></td></tr></table></figure><p>Here, <code>mymask</code> is like a list that contains all the signals you want to block, it is not yet effective by simply add them to <code>mymask</code>. </br> To make them effective, you have to call the <code>sigprocmask()</code> function to add them to an "invisible, unaccessible" list that actually controls the blockage of signals.</p><p>To remove a list of signals you do not wish to block anymore, put them into a mask, and call <code>sigprocmask()</code> with the first parameter being <code>SIG_UNBLOCK</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sigprocmask(SIG_UNBLOCK, &amp;mymask, <span class="literal">NULL</span>);\\ remove signals in <span class="string">&quot;mymask&quot;</span> from block <span class="built_in">list</span>.</span><br></pre></td></tr></table></figure><p>Note that to remove a signal that is not in to block list is permissable.</p><p>The last value of <code>sigprocmask</code> is <code>SIG_SETMASK</code>, which functions like overwriting what was originally in the block list with the signals in your mask.</p><h2 id="signal-disposition">Signal Disposition</h2><p>Signal disposition is the behavior of the process that received the signal.</p><p>To create a custom signal disposition, use <a href="https://man7.org/linux/man-pages/man2/sigaction.2.html"><code>sigaction</code></a> struct.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">my_siga</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siga_handler</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">my_siga.sa_handler = &amp;siga_handler();</span><br><span class="line">sigfillset(&amp;my_siga.sa_mask);</span><br></pre></td></tr></table></figure><p>A <code>sigaction</code> struct looks something like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span>     (*sa_handler)(<span class="keyword">int</span>);  <span class="comment">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;.</span></span><br><span class="line">  <span class="keyword">void</span>     (*sa_sigaction)(<span class="keyword">int</span>, <span class="keyword">siginfo_t</span> *, <span class="keyword">void</span> *); <span class="comment">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;. see man page.</span></span><br><span class="line">  <span class="keyword">sigset_t</span>   sa_mask;   <span class="comment">// signals to be blocked while executing signal handler.</span></span><br><span class="line">  <span class="keyword">int</span>        sa_flags;    <span class="comment">// modifies behavior of signals. see man page.</span></span><br><span class="line">  <span class="keyword">void</span>     (*sa_restorer)(<span class="keyword">void</span>);  <span class="comment">// see man page.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>After customizing your signal disposition, let's make it the disposition of <strong><em>SIGALARM</em></strong> by calling <a href="https://man7.org/linux/man-pages/man2/sigaction.2.html"><code>sigaction()</code></a>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sig_action(SIGALARM, &amp;my_siga, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming &amp; Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrent system </tag>
            
            <tag> C </tag>
            
            <tag> operating system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multithreading in Java</title>
      <link href="/2022/01/22/MultithreadingInJava/"/>
      <url>/2022/01/22/MultithreadingInJava/</url>
      
        <content type="html"><![CDATA[<h1 id="preface">Preface</h1><p>I wanted to build a website of my own from scratch using Java recently, and so I found myself a hands-on tutorial. The very first step was to write small components called <code>servlet</code>, which required multi-threading. <span id="more"></span></p><h1 id="multithreading-basics">Multithreading Basics</h1><p>In an OS, every application executing is usually called a <code>process</code>, while each <code>process</code> can contain multiple <code>threds</code>. Take a typical music player as an example: a music player usually is capable of playing the music while showing the lyrics, and maybe show the album cover as well. Here, one thread will take care of playing the music, while another will take care of synchronizing the lyrics. One process contains at least one thread, but it can contain multiple threads.</p><h1 id="multithreding-in-java">Multithreding in Java</h1><h2 id="multithreading-procedure">Multithreading procedure</h2><p>After creating a <code>Thread</code> instance, a new thread will wait for the<code>start()</code> method to be called so that it will enter Ready state.</br> While being in Ready state, a thread will stay in the ready queue, waiting to be called. </br> When a thread in Ready state acquire CPU resources, it can be put to use by calling the <code>run()</code> method. In this procedure, the thread is in Running state.</br> When a thread runs out of CPU time, or the <code>wait()</code> method is called, the thread will enter Blocked state. While in Blocked state, the thread will remain in this state unless it regains CPU resources.</p><h2 id="creating-a-new-thread-instance">Creating a new <code>Thread</code> Instance</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadRunnable</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">/* override run() method */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">/* override run() method */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronization-between-threads">Synchronization between threads</h2><h3 id="atomic-operation">Atomic operation</h3><p>Assignment like</br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = n + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>seems to look like a single instrution, however, it consists of at least three instructions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// erroneous Assembly.</span><br><span class="line">ld sp(0), x5// suppose stack pointer is pointing to n and load it into x5.</span><br><span class="line">addi x5, x5, 1// n = n + 1.</span><br><span class="line">sd x5, sp(0)// save n = n + 1 back.</span><br></pre></td></tr></table></figure><p>Atomic operations are indivisible:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;   <span class="comment">//---  addi sp sp -8make room on the stack for one int.</span></span><br></pre></td></tr></table></figure><h3 id="shared-variable-in-multithreading">Shared variable in Multithreading</h3><p>Consider this: initialize <code>n</code> to 0, and create two threads. One thread, say thread1 will execute <code>n += 1</code> for 10000 times and the other thread, thread2 will execute <code>n -= 1</code> for 10000 times. Would you expect <code>n == 0</code>? </br> The fact is, the result might differ every time this snippet of codes is executed. This is because, very possibly, after thread1 add 1 to <code>n</code> 10000 times, and before it could store the result, thread2 takes over CPU resources and found that <code>n</code> is still 0.</p><h3 id="synchronized-key-word">synchronized key word</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock object)&#123;</span><br><span class="line"><span class="comment">// clauses</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All clauses in side of these <code>&#123;</code>, <code>&#125;</code> will be locked.</br></p>]]></content>
      
      
      <categories>
          
          <category> Programming &amp; Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Multithreading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes on using Pyserial</title>
      <link href="/2021/08/17/NoteAboutPyserial/"/>
      <url>/2021/08/17/NoteAboutPyserial/</url>
      
        <content type="html"><![CDATA[<h1 id="about-pyserial">About Pyserial</h1><p>This module encapsulates the access methods for serial ports. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend. <span id="more"></span></p><h1 id="installing-pyserial">Installing Pyserial</h1><p>Install using pip： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyserial</span><br></pre></td></tr></table></figure></p><h1 id="serial-object">Serial object</h1><p>The object is 'serial.Serial'. Due to business needs, this app requires compatibility with Windows and MacOS. However, port names are different in Windows and MacOS. In Windows, port names have a format of 【COMx】, where x is an integer； In MacOS, port names are like【/dev/xxxxx】, where x is the specific port name. If you have similar needs, remember to import the 'platform' package. <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import serial</span><br><span class="line"></span><br><span class="line">def create_connection(self, port):</span><br><span class="line">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br><span class="line">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=port,</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br></pre></td></tr></table></figure></p><h2 id="common-properties">Common properties</h2><p>Listed below are all properties of a Serial object： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">port: str #port name</span><br><span class="line">baudrate: int</span><br><span class="line">bytesize #possible values：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS</span><br><span class="line">parity #possible values：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE</span><br><span class="line">stopbits #possible values：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO</span><br><span class="line">timeout: float </span><br><span class="line">xonxoff: bool #switch of software flow control</span><br><span class="line">rtscts: bool #switch of hardware(RTS/CTS) flow control</span><br><span class="line">dsrdtr: bool #switch of hardware(DSR/DTR) flow control</span><br><span class="line">write_timeout: float </span><br><span class="line">inter_byte_timeout: float #set to None to disable</span><br><span class="line">in_waiting: int </span><br><span class="line">out_waiting: int </span><br><span class="line"></span><br></pre></td></tr></table></figure> - 【port】【baudrate】【bytesize】【parity】【stopbits】【in_waiting】are very commonly used. - Setting of【timeout】will impact the behavior of read() method： * When set to None, read() will keep trying to read data from buffer until specified number of characters are read. * When set to 0, read() will immediately return all characters read ranges from 0 to specified number. * When set to x (x is an integer), read() will return specified number of characters before x seconds have elapsed, or read() will return all characters read after x seconds have elapsed. ## Common methods <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def serial.tool.list_ports()</span><br><span class="line">&quot;&quot;&quot;return all ports scanned</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.open()</span><br><span class="line">&quot;&quot;&quot;open serial port</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.close()</span><br><span class="line">&quot;&quot;&quot;shut serial port</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.read(size=1)</span><br><span class="line">&quot;&quot;&quot;read at most n=size characters from the port</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.write(data)</span><br><span class="line">&quot;&quot;&quot;send what&#x27;s inside data to the port. The type of data must be bytes, bytearray or str.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.flush()</span><br><span class="line">&quot;&quot;&quot;Wait for all data to be sent.</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><h1 id="example">Example</h1><p>Encapsulation instance： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import serial</span><br><span class="line"></span><br><span class="line">import serial.tools.list_ports</span><br><span class="line"></span><br><span class="line">import platform</span><br><span class="line"></span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PortManager(object):</span><br><span class="line">&quot;&quot;&quot;The class that manages the port</span><br><span class="line"></span><br><span class="line">    Attributes:</span><br><span class="line">        _system: str  #The system where the app is running</span><br><span class="line">        ser: serial.Serial  #Serial port object</span><br><span class="line">        _serial_port: str  #Serial port name</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    _system = platform.system()</span><br><span class="line">    ser: serial.Serial</span><br><span class="line">    _serial_port: str</span><br><span class="line"></span><br><span class="line">    def set_port(self, port):</span><br><span class="line">    &quot;&quot;&quot;_serial_port setter&quot;&quot;&quot;</span><br><span class="line">        self._serial_port = port</span><br><span class="line"></span><br><span class="line">    def get_port(self):</span><br><span class="line">    &quot;&quot;&quot;_serial_port getter&quot;&quot;&quot;</span><br><span class="line">        return self._serial_port</span><br><span class="line"></span><br><span class="line">    def list_ports(self):</span><br><span class="line">    &quot;&quot;&quot;Get and return all ports scanned&quot;&quot;&quot;</span><br><span class="line">        list_p = list(serial.tools.list_ports.comports())</span><br><span class="line">        list_ports_name = []</span><br><span class="line">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class="line">            list_ports_name = [str(i.name) for i in list_p]</span><br><span class="line">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class="line">            list_ports_name = [str(i.device) for i in list_p]</span><br><span class="line">        return list_ports_name</span><br><span class="line"></span><br><span class="line">    def create_connection(self, port):</span><br><span class="line">    &quot;&quot;&quot;Create serial port connection&quot;&quot;&quot;</span><br><span class="line">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br><span class="line">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=port,</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br><span class="line"></span><br><span class="line">    def send_data(self, value):</span><br><span class="line">    &quot;&quot;&quot;Send data to the port&quot;&quot;&quot;</span><br><span class="line">        write_data = bytearray.fromhex(value)</span><br><span class="line">        try:</span><br><span class="line">            sleep(0.1)</span><br><span class="line">            if self.ser.out_waiting:</span><br><span class="line">                self.ser.reset_output_buffer()</span><br><span class="line">            if self.ser.write(write_data):</span><br><span class="line">                self.ser.flush()</span><br><span class="line">            else:</span><br><span class="line">                if self.ser.write(write_data):</span><br><span class="line">                    self.ser.flush()</span><br><span class="line">            self.ser.reset_output_buffer()</span><br><span class="line">            return True</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.ser.reset_output_buffer()</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def read_data(self):</span><br><span class="line">    &quot;&quot;&quot;Read data from the port&quot;&quot;&quot;</span><br><span class="line">        try:</span><br><span class="line">            sleep(0.1)</span><br><span class="line">            if self.ser.in_waiting:</span><br><span class="line">                bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class="line">                self.ser.reset_input_buffer()</span><br><span class="line">                res = &#x27;&#x27;</span><br><span class="line">                for i in range(len(bs)):</span><br><span class="line">                    res += bs[i]</span><br><span class="line">                    if i % 2 == 1:</span><br><span class="line">                        res += &#x27; &#x27;</span><br><span class="line">                res = res.rstrip(&#x27; &#x27;)</span><br><span class="line">                return res</span><br><span class="line">            else:</span><br><span class="line">                sleep(0.1)</span><br><span class="line">                if self.ser.in_waiting:</span><br><span class="line">                    bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class="line">                    self.ser.reset_input_buffer()</span><br><span class="line">                    res = &#x27;&#x27;</span><br><span class="line">                    for i in range(len(bs)):</span><br><span class="line">                        res += bs[i]</span><br><span class="line">                        if i % 2 == 1:</span><br><span class="line">                            res += &#x27; &#x27;</span><br><span class="line">                    res = res.rstrip(&#x27; &#x27;)</span><br><span class="line">                    return res</span><br><span class="line">                else:</span><br><span class="line">                    self.ser.reset_input_buffer()</span><br><span class="line">                    return &quot;&quot;</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.ser.reset_input_buffer()</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">    def close(self, *ser):</span><br><span class="line">    &quot;&quot;&quot;close the port&quot;&quot;&quot;</span><br><span class="line">        if ser:</span><br><span class="line">            ser[0].close()</span><br><span class="line">        else:</span><br><span class="line">            self.ser.close()</span><br></pre></td></tr></table></figure> # Conclusion This is a web app built by me using Bootstrap, which is mainly used to test the customized relay boards of the company I worked in. This app utilized pyserial to communicate through serial ports.</p><p>Configure group mode： <img src="https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Configure group mode" /></p><p>Board control panel： <img src="https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Board control panel" /></p><p>Board configure panel： <img src="https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Board configure panel" /></p><p>Connection error handling： <img src="https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Error handling" /></p><p>Change target board in multiple boards cascading： <img src="https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Change target board in multiple boards cascading" /></p>]]></content>
      
      
      <categories>
          
          <category> Programming &amp; Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Flask project on CentOS 8</title>
      <link href="/2021/07/03/DeployAFlaskProj/"/>
      <url>/2021/07/03/DeployAFlaskProj/</url>
      
        <content type="html"><![CDATA[<h1 id="preface">Preface</h1><p>The reason for writing this note is I met a lot of problems that do not have direct solutions that can be found online. I thought writing it down could help a lot as I may still face similar issues in the future. <span id="more"></span> # About the server</p><p>I purchased a server provided by Ali cloud, which was on a almost 60% discount when I bought it.</p><h1 id="about-dependencies">About dependencies</h1><h2 id="python-version">Python version</h2><figure class="highlight plaintext"><figcaption><span>is a convenient instruction on CentOS. ```yum``` provides 4 versions of Python:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- python2 </span><br><span class="line">- python36</span><br><span class="line">- python38</span><br><span class="line">- python39</span><br><span class="line"></span><br><span class="line">For instance, if you wish to install python 3.9, simply type in</span><br></pre></td></tr></table></figure><p>yum install python39 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> If you are prompted with permission denied, add ```sudo``` before the command.</span><br><span class="line"></span><br><span class="line">## Virtual environment</span><br><span class="line">Why is a venv (vertual environment) needed?</span><br><span class="line"></span><br><span class="line">The good thing about venv is that it has a scope limited to one project. It will not affect your system-level settings, and it is independent from other projects. For instance, when one of your project needs Fabric 1.x and another needs Fabric 2.x, and both project has venv, there will not be a conflict. However, if you do not have venv enabled, you will have to delete one version of Fabric.</span><br><span class="line"></span><br><span class="line">The official documentary suggests using</span><br></pre></td></tr></table></figure> python3 -m venv (/path to new virtual environment) <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">to create a new venv.</span><br><span class="line"></span><br><span class="line">For instance, you can use</span><br></pre></td></tr></table></figure> python3 -m venv venv <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">to create a venv under current working directory.</span><br><span class="line"></span><br><span class="line">After that, use</span><br></pre></td></tr></table></figure> source ./venv/bin/activate <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">to activate venv.</span><br><span class="line"></span><br><span class="line">To deactivate venv, simply type in</span><br></pre></td></tr></table></figure> deactivate <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line">## Dependencies</span><br><span class="line">This part requires your Flask project to be all set, waiting to be synchronized to the server. </span><br><span class="line"></span><br><span class="line">You can use</span><br></pre></td></tr></table></figure> pip freeze &gt; requirements.txt <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">to extract all packages installed in the current venv, and save them into a file named &#x27;requirements.txt&#x27;.</span><br><span class="line"></span><br><span class="line">To install all dependencies on server, simply type in:</span><br></pre></td></tr></table></figure> pip install -r requiremtns.txt <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Note that if you are prompted permission denied, Python documentary recommends using &#x27;--user&#x27; option instead of adding a sudo. The effect of this option is to install the package into current user&#x27;s home directory, instead of under where python is installed.</span><br><span class="line"></span><br><span class="line"># Install Nginx</span><br><span class="line">```Nginx``` is already packed by ```yum```, so we can use</span><br><span class="line"></span><br></pre></td></tr></table></figure> sudo yum install nginx <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">to install nginx.</span><br><span class="line"></span><br><span class="line">After installation, you can check if the installation was successful by</span><br></pre></td></tr></table></figure> nginx -v <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line">These are a few common commands:</span><br></pre></td></tr></table></figure> sudo systemctl enable nginx //Start Nginx upon booting sudo systemctl start nginx //Start Nginx sudo systemctl stop nginx //Shut down Nginx sudo systemctl restart nginx //Reload Nginx sudo systemctl status nginx //Check status of Nginx <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Install uwsgi</span><br><span class="line">You can install uwsgi through</span><br></pre></td></tr></table></figure> pip install uwsgi <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line">After installation, you can check if the installation was successful by</span><br></pre></td></tr></table></figure> uwsgi --version <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line"># Deploy to server</span><br><span class="line">Connect to your server, enter the directory under which you want your project to be placed.</span><br><span class="line"></span><br><span class="line">Synchroze your project with git, scp or sftp.</span><br><span class="line"></span><br><span class="line">Make sure the python version on your server matches that on your computer.</span><br><span class="line"></span><br><span class="line">Then, you can proceed to install dependencies using</span><br></pre></td></tr></table></figure> pip install -r requirements.txt <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line">## uwsgi initialization</span><br><span class="line">Create a file named &#x27;uwsgi.ini&#x27; under your project&#x27;s root directory.</span><br><span class="line">In the file, type in</span><br></pre></td></tr></table></figure> [uwsgi] socket=127.0.0.1:5000 //The port can be altered.</p><p>chdir=/home/wst/wms //Your project's root directory.</p><p>wsgi-file=app.py //Your start file. Note this is a relative path to your root dir.</p><p>callable=app //The name of your start file instance.</p><p>processes=4</p><p>threads=2</p><p>master=true</p><p>stats=127.0.0.1:9191</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Remember to delete the side notes. uwsgi cannot tell the difference between comments and scripts.</span><br><span class="line"></span><br><span class="line">## Nginx configuration</span><br><span class="line">The configuration file for Nginx, &#x27;nginx.conf&#x27;, is usually located under &#x27;/etc/nginx&#x27; directory. If you cannot find it, type in</span><br></pre></td></tr></table></figure><p>sudo nginx -t <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">to see where is it.</span><br><span class="line"></span><br><span class="line">Open it with a text editor:</span><br></pre></td></tr></table></figure> sudo vim /etc/nginx/nginx.conf <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">And you will see something like:</span><br></pre></td></tr></table></figure> # For more information on configuration, see: # * Official English Documentation: http://nginx.org/en/docs/ # * Official Russian Documentation: http://nginx.org/ru/docs/</p><p>user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid;</p><h1 id="load-dynamic-modules.-see-usrsharedocnginxreadme.dynamic.">Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</h1><p>include /usr/share/nginx/modules/*.conf;</p><p>events { worker_connections 1024; }</p><p>http { log_format main '$remote_addr - <span class="math inline">\(remote_user [\)</span>time_local] "<span class="math inline">\(request&quot; &#39;  &#39;\)</span>status <span class="math inline">\(body_bytes_sent &quot;\)</span>http_referer" ' '"<span class="math inline">\(http_user_agent&quot; &quot;\)</span>http_x_forwarded_for"';</p><pre><code>access_log  /var/log/nginx/access.log  main;sendfile            on;tcp_nopush          on;tcp_nodelay         on;keepalive_timeout   65;types_hash_max_size 2048;include             /etc/nginx/mime.types;default_type        application/octet-stream;# Load modular configuration files from the /etc/nginx/conf.d directory.# See http://nginx.org/en/docs/ngx_core_module.html#include# for more information.include /etc/nginx/conf.d/*.conf;server &#123;    listen       80 default_server;    listen       [::]:80 default_server;    server_name  _;    root         /usr/share/nginx/html;    # Load configuration files for the default server block.    include /etc/nginx/default.d/*.conf;    location / &#123;    &#125;    error_page 404 /404.html;        location = /40x.html &#123;    &#125;    error_page 500 502 503 504 /50x.html;        location = /50x.html &#123;    &#125;&#125;</code></pre><h1 id="settings-for-a-tls-enabled-server.">Settings for a TLS enabled server.</h1><h1 id="section"></h1><h1 id="server">server {</h1><h1 id="listen-443-ssl-http2-default_server">listen 443 ssl http2 default_server;</h1><h1 id="listen-443-ssl-http2-default_server-1">listen [::]:443 ssl http2 default_server;</h1><h1 id="server_name-_">server_name _;</h1><h1 id="root-usrsharenginxhtml">root /usr/share/nginx/html;</h1><h1 id="section-1"></h1><h1 id="ssl_certificate-etcpkinginxserver.crt">ssl_certificate "/etc/pki/nginx/server.crt";</h1><h1 id="ssl_certificate_key-etcpkinginxprivateserver.key">ssl_certificate_key "/etc/pki/nginx/private/server.key";</h1><h1 id="ssl_session_cache-sharedssl1m">ssl_session_cache shared:SSL:1m;</h1><h1 id="ssl_session_timeout-10m">ssl_session_timeout 10m;</h1><h1 id="ssl_ciphers-profilesystem">ssl_ciphers PROFILE=SYSTEM;</h1><h1 id="ssl_prefer_server_ciphers-on">ssl_prefer_server_ciphers on;</h1><h1 id="section-2"></h1><h1 id="load-configuration-files-for-the-default-server-block."># Load configuration files for the default server block.</h1><h1 id="include-etcnginxdefault.d.conf">include /etc/nginx/default.d/*.conf;</h1><h1 id="section-3"></h1><h1 id="location">location / {</h1><h1 id="section-4">}</h1><h1 id="section-5"></h1><h1 id="error_page-404-404.html">error_page 404 /404.html;</h1><h1 id="location-40x.html">location = /40x.html {</h1><h1 id="section-6">}</h1><h1 id="section-7"></h1><h1 id="error_page-500-502-503-504-50x.html">error_page 500 502 503 504 /50x.html;</h1><h1 id="location-50x.html">location = /50x.html {</h1><h1 id="section-8">}</h1><h1 id="section-9">}</h1><p>} <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Change &#x27;server_name&#x27; inside &#x27;server&#x27; to your ip address or your domain name.</span><br><span class="line"></span><br><span class="line">Add two lines under &#x27;root&#x27;. One is &#x27;access_log&#x27;, the other is &#x27;error_log&#x27;.</span><br><span class="line"></span><br><span class="line">Enable &#x27;uwsgi_params&#x27; in &#x27;location /&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure> server { listen 80 default_server; listen [::]:80 default_server; server_name xxx.xxx.xxx.xxx; root /usr/share/nginx/html; access_log /home/wst/wms/logs/access.log; error_log /home/wst/wms/logs/error.log;</p><pre><code>    # Load configuration files for the default server block.    include /etc/nginx/default.d/*.conf;    location / &#123;        include     uwsgi_params;        uwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致        uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址        uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址        uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名    &#125;    error_page 404 /404.html;        location = /40x.html &#123;    &#125;    error_page 500 502 503 504 /50x.html;        location = /50x.html &#123;    &#125;&#125;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Then use</span><br></pre></td></tr></table></figure><p>sudo nginx -t <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to check if there is any grammatical error.</span><br><span class="line">If you are not prompted an error, type in</span><br></pre></td></tr></table></figure> sudo systemctl restart nginx ``` . Now you should be able to see your web app running on your domain or your ip address.</p>]]></content>
      
      
      <categories>
          
          <category> Linux &amp; Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
