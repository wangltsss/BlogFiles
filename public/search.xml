<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Machine Learning Miscellanea</title>
      <link href="/2022/09/20/mLNotes/"/>
      <url>/2022/09/20/mLNotes/</url>
      
        <content type="html"><![CDATA[<h1 id="about">About</h1><p>This blog will contain an overview of building a machine learning model from scratch, as well as an introduction to some auxiliary tools and libraries. This blog is intended for those who want to know about machine learning, or learn it at an introductory level. If you are already an expert, you might not find this blog useful.</br> <span id="more"></span> Personally speaking, machine learning, at my level of proficiency, is more like a math subject rather than a computer science subject. You may feel like you are reading through a math article as a result of that. It involves a lot of linear regression, a lot of calculus and a lot of linear algebra. But don't get too nervous yet as at an introductory level of machine learning, these math concepts also remain relatively easy. </br> Continue on if you feel more than ready to dive into the ocean of knowledge.</p><h1 id="concept">Concept</h1><p>To be filled.</p><h2 id="supervised-learning">Supervised Learning</h2><p>In a supervised learning, the model is told what are 'correct answers'. </br> This kind of machine learning is applied in area of predicting(stock prediction, score prediction, etc.) and classifying the data(differentiate spam emails from normal ones). </br> Among these two, regression is usually applied when the context requires or provides continuous data, and classification is applied when the data are discrete.</p><h2 id="unsupervise-learning">Unsupervise Learning</h2><p>In an unsupervised learning, the training data does not have any label. It is the algorithm's goal to find patterns among these data.</p><h1 id="serious-math-stuff">Serious Math Stuff</h1><h2 id="linear-regression">Linear Regression</h2><p>To be filled.</p><h2 id="cost-function">Cost Function</h2><p>To be filled.</p><h2 id="gradient-descent">Gradient Descent</h2><p>To be filled.</p><h2 id="multivariatte-linear-regression">Multivariatte Linear Regression</h2><p>To be filled.</p><h2 id="classification">Classification</h2><p>To be filled.</p><h2 id="neural-networks">Neural NetWorks</h2><p>To be filled.</p><h1 id="auxiliary-toolslibraries">Auxiliary Tools/Libraries</h1><h2 id="pillow">Pillow</h2><p><strong><em>Pillow</em></strong> is a Python library that enables image vectorization and manipulation. The purpose for our interest is to convert training dataset for our machine learning model to vectorized <strong><em>numpy</em></strong> arrays.</p><h2 id="tkinter">tkinter</h2><p><strong><em>tkinter</em></strong> is a Python library that enables a graphic file selection system.</p>]]></content>
      
      
      <categories>
          
          <category> Programming &amp; Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Concurrent System Study Notes(Continuing...)</title>
      <link href="/2022/01/26/ConcurrentNotes/"/>
      <url>/2022/01/26/ConcurrentNotes/</url>
      
        <content type="html"><![CDATA[<h1 id="signals">Signals</h1><h2 id="signal-lifespan">Signal Lifespan</h2><p>A <strong>signal</strong> is <strong>generated</strong> when a relevant event happens, and is <strong>delivered</strong> when the target process receves it. The lifespan of a signal is from its generation to its delivery.</p><span id="more"></span><h2 id="signal-block-vs.-signal-ignore">Signal Block vs. Signal Ignore</h2><p>When a process <strong>blocks</strong> a signal, the signal is pending to be unblocked. It is <strong>not delivered</strong> while being blocked.</br></p><p>Whereas when a process <strong>ignores</strong> a signal, the signal <strong>is delivered</strong>, but the process does not respond to the signal.</p><h2 id="signal-mask">Signal Mask</h2><p><strong>Signal mask</strong> is a set of signals that will be blocked.</br></p><p>A signal mask is of type <code>sigset_t</code>.</br></p><p>To add/remove signals to/from a signal mask:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sigset_t</span> mymask;</span><br><span class="line"></span><br><span class="line">sigemptyset(&amp;mymask);\\ Set the custom mask to contain no signals.</span><br><span class="line">sigaddset(&amp;mymask, SIGINT);\\ Set the custom mask to contain SIGINT.</span><br><span class="line">sigdelset(&amp;mymask, SIGINT);\\ Set the custom mask to <span class="keyword">delete</span> SIGINT.</span><br><span class="line">sigfillset(&amp;mymask);\\ Set the custom mask to contain all the signals.</span><br></pre></td></tr></table></figure><p>Then, to make a signal mask effective, call the <code>sigprocmask()</code> function:</br> (To learn details of <code>sigprocmask()</code>, refer to its <a href="https://man7.org/linux/man-pages/man2/sigprocmask.2.html#top_of_page">man page</a>.)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sigprocmask(SIG_BLOCK, &amp;mymask, <span class="literal">NULL</span>);\\ Add signals in <span class="string">&quot;mymask&quot;</span> to block <span class="built_in">list</span>. </span><br></pre></td></tr></table></figure><p>Here, <code>mymask</code> is like a list that contains all the signals you want to block, it is not yet effective by simply add them to <code>mymask</code>. </br> To make them effective, you have to call the <code>sigprocmask()</code> function to add them to an "invisible, unaccessible" list that actually controls the blockage of signals.</p><p>To remove a list of signals you do not wish to block anymore, put them into a mask, and call <code>sigprocmask()</code> with the first parameter being <code>SIG_UNBLOCK</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sigprocmask(SIG_UNBLOCK, &amp;mymask, <span class="literal">NULL</span>);\\ remove signals in <span class="string">&quot;mymask&quot;</span> from block <span class="built_in">list</span>.</span><br></pre></td></tr></table></figure><p>Note that to remove a signal that is not in to block list is permissable.</p><p>The last value of <code>sigprocmask</code> is <code>SIG_SETMASK</code>, which functions like overwriting what was originally in the block list with the signals in your mask.</p><h2 id="signal-disposition">Signal Disposition</h2><p>Signal disposition is the behavior of the process that received the signal.</p><p>To create a custom signal disposition, use <a href="https://man7.org/linux/man-pages/man2/sigaction.2.html"><code>sigaction</code></a> struct.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">my_siga</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siga_handler</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">my_siga.sa_handler = &amp;siga_handler();</span><br><span class="line">sigfillset(&amp;my_siga.sa_mask);</span><br></pre></td></tr></table></figure><p>A <code>sigaction</code> struct looks something like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span>     (*sa_handler)(<span class="keyword">int</span>);  <span class="comment">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;.</span></span><br><span class="line">  <span class="keyword">void</span>     (*sa_sigaction)(<span class="keyword">int</span>, <span class="keyword">siginfo_t</span> *, <span class="keyword">void</span> *); <span class="comment">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;. see man page.</span></span><br><span class="line">  <span class="keyword">sigset_t</span>   sa_mask;   <span class="comment">// signals to be blocked while executing signal handler.</span></span><br><span class="line">  <span class="keyword">int</span>        sa_flags;    <span class="comment">// modifies behavior of signals. see man page.</span></span><br><span class="line">  <span class="keyword">void</span>     (*sa_restorer)(<span class="keyword">void</span>);  <span class="comment">// see man page.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>After customizing your signal disposition, let's make it the disposition of <strong><em>SIGALARM</em></strong> by calling <a href="https://man7.org/linux/man-pages/man2/sigaction.2.html"><code>sigaction()</code></a>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sig_action(SIGALARM, &amp;my_siga, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming &amp; Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concurrent System </tag>
            
            <tag> C </tag>
            
            <tag> Operating System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multithreading in Java</title>
      <link href="/2022/01/22/MultithreadingInJava/"/>
      <url>/2022/01/22/MultithreadingInJava/</url>
      
        <content type="html"><![CDATA[<h1 id="preface">Preface</h1><p>I wanted to build a website of my own from scratch using Java recently, and so I found myself a hands-on tutorial. The very first step was to write small components called <strong><em>servlet</em></strong>, which required multithreading. <span id="more"></span></p><h1 id="multithreading-basics">Multithreading Basics</h1><p>In an OS, every application executing is usually called a <strong><em>process</em></strong>, while each <strong><em>process</em></strong> can contain multiple <strong><em>threads</em></strong>. Take a typical music player as an example: a music player usually is capable of playing the music while showing the lyrics, and maybe show the album cover as well. Here, one thread will take care of playing the music, while another will take care of synchronizing the lyrics. One process contains at least one thread, but it can contain multiple threads.</p><h1 id="multithreding-in-java">Multithreding in Java</h1><h2 id="multithreading-procedure">Multithreading procedure</h2><p>After creating a <strong><em>Thread</em></strong> instance, a new thread will wait for the<code>start()</code> method to be called so that it will enter <strong><em>Ready</em></strong> state.</br> While being in <strong><em>Ready</em></strong> state, a thread will stay in the ready queue, waiting to be called. </br> When a thread in <strong><em>Ready</em></strong> state acquire CPU resources, it can be put to use by calling the <code>run()</code> method. In this procedure, the thread is in <strong><em>Running</em></strong> state.</br> When a thread runs out of CPU time, or the <code>wait()</code> method is called, the thread will enter <strong><em>Blocked</em></strong> state. While in <strong><em>Blocked</em></strong> state, the thread will remain in this state unless it regains CPU resources.</p><h2 id="creating-a-new-thread-instance">Creating a new <strong><em>Thread</em></strong> Instance</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadRunnable</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">/* override run() method */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">/* override run() method */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/* */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronization-between-threads">Synchronization between threads</h2><h3 id="atomic-operation">Atomic operation</h3><p>Assignment like</br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = n + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>seems to look like a single instrution, however, it consists of at least three instructions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// erroneous Assembly.</span><br><span class="line">ld sp(0), x5// suppose stack pointer is pointing to n and load it into x5.</span><br><span class="line">addi x5, x5, 1// n = n + 1.</span><br><span class="line">sd x5, sp(0)// save n = n + 1 back.</span><br></pre></td></tr></table></figure><p>Atomic operations are indivisible:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;   <span class="comment">//---  addi sp sp -8make room on the stack for one int.</span></span><br></pre></td></tr></table></figure><h3 id="shared-variable-in-multithreading">Shared variable in Multithreading</h3><p>Consider this: initialize <code>n</code> to 0, and create two threads. One thread, say thread1 will execute <code>n += 1</code> for 10000 times and the other thread, thread2 will execute <code>n -= 1</code> for 10000 times. Would you expect <code>n == 0</code>? </br> The fact is, the result might differ every time this snippet of codes is executed. This is because, very possibly, after thread1 add 1 to <code>n</code> 10000 times, and before it could store the result, thread2 takes over CPU resources and found that <code>n</code> is still 0.</p><h3 id="synchronized-key-word">synchronized key word</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock object)&#123;</span><br><span class="line"><span class="comment">// clauses</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All clauses in side of these <code>&#123;</code>, <code>&#125;</code> will be locked.</br></p>]]></content>
      
      
      <categories>
          
          <category> Programming &amp; Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Multithreading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes on using Pyserial</title>
      <link href="/2021/08/17/NoteAboutPyserial/"/>
      <url>/2021/08/17/NoteAboutPyserial/</url>
      
        <content type="html"><![CDATA[<h1 id="about-pyserial">About <strong><em>Pyserial</em></strong></h1><p>This module encapsulates the access methods for serial ports. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend. <span id="more"></span></p><h1 id="installing-pyserial">Installing <strong><em>Pyserial</em></strong></h1><p>Install using <strong><em>pip</em></strong>： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyserial</span><br></pre></td></tr></table></figure></p><h1 id="serial-object">Serial object</h1><p>The object is <code>serial.Serial</code>. Due to business needs, this app requires compatibility with Windows and MacOS. However, port names are different in Windows and MacOS. In Windows, port names have a format of [COMx], where x is an integer； In MacOS, port names are like [/dev/xxxxx], where x is the specific port name. If you have similar needs, remember to import the <code>platform</code> package. <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import serial</span><br><span class="line"></span><br><span class="line">def create_connection(self, port):</span><br><span class="line">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br><span class="line">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=port,</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br></pre></td></tr></table></figure></p><h2 id="common-properties">Common properties</h2><p>Listed below are all properties of a <code>Serial</code> object： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">port: str #port name</span><br><span class="line">baudrate: int</span><br><span class="line">bytesize #possible values：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS</span><br><span class="line">parity #possible values：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE</span><br><span class="line">stopbits #possible values：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO</span><br><span class="line">timeout: float </span><br><span class="line">xonxoff: bool #switch of software flow control</span><br><span class="line">rtscts: bool #switch of hardware(RTS/CTS) flow control</span><br><span class="line">dsrdtr: bool #switch of hardware(DSR/DTR) flow control</span><br><span class="line">write_timeout: float </span><br><span class="line">inter_byte_timeout: float #set to None to disable</span><br><span class="line">in_waiting: int </span><br><span class="line">out_waiting: int </span><br><span class="line"></span><br></pre></td></tr></table></figure></p><ul><li>[port], [baudrate], [bytesize], [parity], [stopbits], [in_waiting]are very commonly used.</li><li>Setting of [timeout] will impact the behavior of <code>read()</code> method：<ul><li>When set to None, <code>read()</code> will keep trying to read data from buffer until specified number of characters are read.</li><li>When set to 0, <code>read()</code> will immediately return all characters read ranges from 0 to specified number.</li><li>When set to x (x is an integer), <code>read()</code> will return specified number of characters before x seconds have elapsed, or <code>read()</code> will return all characters read after x seconds have elapsed.</li></ul></li></ul><h2 id="common-methods">Common methods</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def serial.tool.list_ports()</span><br><span class="line">&quot;&quot;&quot;return all ports scanned</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.open()</span><br><span class="line">&quot;&quot;&quot;open serial port</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.close()</span><br><span class="line">&quot;&quot;&quot;shut serial port</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.read(size=1)</span><br><span class="line">&quot;&quot;&quot;read at most n=size characters from the port</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.write(data)</span><br><span class="line">&quot;&quot;&quot;send what&#x27;s inside data to the port. The type of data must be bytes, bytearray or str.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">serial.Serial.flush()</span><br><span class="line">&quot;&quot;&quot;Wait for all data to be sent.</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="example">Example</h1><p>Encapsulation instance： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import serial</span><br><span class="line"></span><br><span class="line">import serial.tools.list_ports</span><br><span class="line"></span><br><span class="line">import platform</span><br><span class="line"></span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PortManager(object):</span><br><span class="line">&quot;&quot;&quot;The class that manages the port</span><br><span class="line"></span><br><span class="line">    Attributes:</span><br><span class="line">        _system: str  #The system where the app is running</span><br><span class="line">        ser: serial.Serial  #Serial port object</span><br><span class="line">        _serial_port: str  #Serial port name</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    _system = platform.system()</span><br><span class="line">    ser: serial.Serial</span><br><span class="line">    _serial_port: str</span><br><span class="line"></span><br><span class="line">    def set_port(self, port):</span><br><span class="line">    &quot;&quot;&quot;_serial_port setter&quot;&quot;&quot;</span><br><span class="line">        self._serial_port = port</span><br><span class="line"></span><br><span class="line">    def get_port(self):</span><br><span class="line">    &quot;&quot;&quot;_serial_port getter&quot;&quot;&quot;</span><br><span class="line">        return self._serial_port</span><br><span class="line"></span><br><span class="line">    def list_ports(self):</span><br><span class="line">    &quot;&quot;&quot;Get and return all ports scanned&quot;&quot;&quot;</span><br><span class="line">        list_p = list(serial.tools.list_ports.comports())</span><br><span class="line">        list_ports_name = []</span><br><span class="line">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class="line">            list_ports_name = [str(i.name) for i in list_p]</span><br><span class="line">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class="line">            list_ports_name = [str(i.device) for i in list_p]</span><br><span class="line">        return list_ports_name</span><br><span class="line"></span><br><span class="line">    def create_connection(self, port):</span><br><span class="line">    &quot;&quot;&quot;Create serial port connection&quot;&quot;&quot;</span><br><span class="line">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br><span class="line">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class="line">            self.ser = serial.Serial(port=port,</span><br><span class="line">                                     baudrate=115200,</span><br><span class="line">                                     bytesize=8,</span><br><span class="line">                                     stopbits=1)</span><br><span class="line"></span><br><span class="line">    def send_data(self, value):</span><br><span class="line">    &quot;&quot;&quot;Send data to the port&quot;&quot;&quot;</span><br><span class="line">        write_data = bytearray.fromhex(value)</span><br><span class="line">        try:</span><br><span class="line">            sleep(0.1)</span><br><span class="line">            if self.ser.out_waiting:</span><br><span class="line">                self.ser.reset_output_buffer()</span><br><span class="line">            if self.ser.write(write_data):</span><br><span class="line">                self.ser.flush()</span><br><span class="line">            else:</span><br><span class="line">                if self.ser.write(write_data):</span><br><span class="line">                    self.ser.flush()</span><br><span class="line">            self.ser.reset_output_buffer()</span><br><span class="line">            return True</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.ser.reset_output_buffer()</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def read_data(self):</span><br><span class="line">    &quot;&quot;&quot;Read data from the port&quot;&quot;&quot;</span><br><span class="line">        try:</span><br><span class="line">            sleep(0.1)</span><br><span class="line">            if self.ser.in_waiting:</span><br><span class="line">                bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class="line">                self.ser.reset_input_buffer()</span><br><span class="line">                res = &#x27;&#x27;</span><br><span class="line">                for i in range(len(bs)):</span><br><span class="line">                    res += bs[i]</span><br><span class="line">                    if i % 2 == 1:</span><br><span class="line">                        res += &#x27; &#x27;</span><br><span class="line">                res = res.rstrip(&#x27; &#x27;)</span><br><span class="line">                return res</span><br><span class="line">            else:</span><br><span class="line">                sleep(0.1)</span><br><span class="line">                if self.ser.in_waiting:</span><br><span class="line">                    bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class="line">                    self.ser.reset_input_buffer()</span><br><span class="line">                    res = &#x27;&#x27;</span><br><span class="line">                    for i in range(len(bs)):</span><br><span class="line">                        res += bs[i]</span><br><span class="line">                        if i % 2 == 1:</span><br><span class="line">                            res += &#x27; &#x27;</span><br><span class="line">                    res = res.rstrip(&#x27; &#x27;)</span><br><span class="line">                    return res</span><br><span class="line">                else:</span><br><span class="line">                    self.ser.reset_input_buffer()</span><br><span class="line">                    return &quot;&quot;</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.ser.reset_input_buffer()</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">    def close(self, *ser):</span><br><span class="line">    &quot;&quot;&quot;close the port&quot;&quot;&quot;</span><br><span class="line">        if ser:</span><br><span class="line">            ser[0].close()</span><br><span class="line">        else:</span><br><span class="line">            self.ser.close()</span><br></pre></td></tr></table></figure></p><h1 id="conclusion">Conclusion</h1><p>This is a web app built by me using <strong><em>Bootstrap</em></strong>, which is mainly used to test the customized relay boards of the company I worked in. This app utilized pyserial to communicate through serial ports.</p><p>Configure group mode： <img src="https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Configure group mode" /></p><p>Board control panel： <img src="https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Board control panel" /></p><p>Board configure panel： <img src="https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Board configure panel" /></p><p>Connection error handling： <img src="https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Error handling" /></p><p>Change target board in multiple boards cascading： <img src="https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center" alt="Change target board in multiple boards cascading" /></p>]]></content>
      
      
      <categories>
          
          <category> Programming &amp; Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Flask project on CentOS 8</title>
      <link href="/2021/07/03/DeployAFlaskProj/"/>
      <url>/2021/07/03/DeployAFlaskProj/</url>
      
        <content type="html"><![CDATA[<h1 id="preface">Preface</h1><p>The reason for writing this note is I met a lot of problems that do not have direct solutions that can be found online. I thought writing it down could help a lot as I may still face similar issues in the future. <span id="more"></span></p><h1 id="about-the-server">About the server</h1><p>I purchased a server provided by Ali cloud, which was on a almost 60% discount when I bought it.</p><h1 id="about-dependencies">About dependencies</h1><h2 id="python-version">Python version</h2><p><strong><em>yum</em></strong> is a convenient instruction on CentOS. <strong><em>yum</em></strong> provides 4 versions of <strong><em>Python</em></strong>:</p><ul><li>python2</li><li>python36</li><li>python38</li><li>python39</li></ul><p>For instance, if you wish to install python 3.9, simply type in <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python39</span><br></pre></td></tr></table></figure> If you are prompted with permission denied, add <code>sudo</code> before the command.</p><h2 id="virtual-environment">Virtual environment</h2><p>Why is a venv (vertual environment) needed?</p><p>The good thing about venv is that it has a scope limited to one project. It will not affect your system-level settings, and it is independent from other projects. For instance, when one of your project needs Fabric 1.x and another needs Fabric 2.x, and both project has venv, there will not be a conflict. However, if you do not have venv enabled, you will have to delete one version of Fabric.</p><p>The official documentary suggests using <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv (/path to new virtual environment)</span><br></pre></td></tr></table></figure> to create a new venv.</p><p>For instance, you can use <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv venv</span><br></pre></td></tr></table></figure> to create a venv under current working directory.</p><p>After that, use <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./venv/bin/activate</span><br></pre></td></tr></table></figure> to activate venv.</p><p>To deactivate venv, simply type in <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure> .</p><h2 id="dependencies">Dependencies</h2><p>This part requires your <strong><em>Flask</em></strong> project to be all set, waiting to be synchronized to the server.</p><p>You can use <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure> to extract all packages installed in the current venv, and save them into a file named 'requirements.txt'.</p><p>To install all dependencies on server, simply type in: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requiremtns.txt</span><br></pre></td></tr></table></figure> Note that if you are prompted permission denied, Python documentary recommends using '--user' option instead of adding a sudo. The effect of this option is to install the package into current user's home directory, instead of under where python is installed.</p><h1 id="install-nginx">Install <strong><em>Nginx</em></strong></h1><p><strong><em>Nginx</em></strong> is already packed by <strong><em>yum</em></strong>, so we can use</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><p>to install nginx.</p><p>After installation, you can check if the installation was successful by <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure> .</p><p>These are a few common commands: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx //Start Nginx upon booting</span><br><span class="line">sudo systemctl start nginx //Start Nginx</span><br><span class="line">sudo systemctl stop nginx //Shut down Nginx</span><br><span class="line">sudo systemctl restart nginx //Reload Nginx</span><br><span class="line">sudo systemctl status nginx //Check status of Nginx</span><br></pre></td></tr></table></figure></p><h1 id="install-uwsgi">Install <strong><em>uwsgi</em></strong></h1><p>You can install <strong><em>uwsgi</em></strong> through <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure> .</p><p>After installation, you can check if the installation was successful by <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --version</span><br></pre></td></tr></table></figure> .</p><h1 id="deploy-to-server">Deploy to server</h1><p>Connect to your server, enter the directory under which you want your project to be placed.</p><p>Synchroze your project with git, scp or sftp.</p><p>Make sure the python version on your server matches that on your computer.</p><p>Then, you can proceed to install dependencies using <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure> .</p><h2 id="uwsgi-initialization"><strong><em>uwsgi</em></strong> initialization</h2><p>Create a file named 'uwsgi.ini' under your project's root directory. In the file, type in <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket=127.0.0.1:5000 //The port can be altered.</span><br><span class="line"></span><br><span class="line">chdir=/home/wst/wms //Your project&#x27;s root directory.</span><br><span class="line"></span><br><span class="line">wsgi-file=app.py //Your start file. Note this is a relative path to your root dir.</span><br><span class="line"></span><br><span class="line">callable=app //The name of your start file instance.</span><br><span class="line"></span><br><span class="line">processes=4 </span><br><span class="line"></span><br><span class="line">threads=2</span><br><span class="line"></span><br><span class="line">master=true</span><br><span class="line"></span><br><span class="line">stats=127.0.0.1:9191</span><br><span class="line"></span><br></pre></td></tr></table></figure> Remember to delete the side notes. <strong><em>uwsgi</em></strong> cannot tell the difference between comments and scripts.</p><h2 id="nginx-configuration">Nginx configuration</h2><p>The configuration file for <strong><em>Nginx</em></strong>, 'nginx.conf', is usually located under '/etc/nginx' directory. If you cannot find it, type in <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure> to see where is it.</p><p>Open it with a text editor: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure> , and you will see something like: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># Settings for a TLS enabled server.</span><br><span class="line">#</span><br><span class="line">#    server &#123;</span><br><span class="line">#        listen       443 ssl http2 default_server;</span><br><span class="line">#        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">#        server_name  _;</span><br><span class="line">#        root         /usr/share/nginx/html;</span><br><span class="line">#</span><br><span class="line">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class="line">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class="line">#        ssl_session_cache shared:SSL:1m;</span><br><span class="line">#        ssl_session_timeout  10m;</span><br><span class="line">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class="line">#        ssl_prefer_server_ciphers on;</span><br><span class="line">#</span><br><span class="line">#        # Load configuration files for the default server block.</span><br><span class="line">#        include /etc/nginx/default.d/*.conf;</span><br><span class="line">#</span><br><span class="line">#        location / &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 404 /404.html;</span><br><span class="line">#            location = /40x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 500 502 503 504 /50x.html;</span><br><span class="line">#            location = /50x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Change 'server_name' inside 'server' to your ip address or your domain name.</p><p>Add two lines under 'root'. One is 'access_log', the other is 'error_log'.</p><p>Enable 'uwsgi_params' in 'location /'.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  xxx.xxx.xxx.xxx;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line">    access_log  /home/wst/wms/logs/access.log;</span><br><span class="line">    error_log  /home/wst/wms/logs/error.log;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">   include     uwsgi_params;</span><br><span class="line">    uwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致</span><br><span class="line">     uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址</span><br><span class="line">     uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址</span><br><span class="line">     uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then use <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure> to check if there is any grammatical error. If you are not prompted an error, type in <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure> . Now you should be able to see your web app running on your domain or your ip address.</p>]]></content>
      
      
      <categories>
          
          <category> Linux &amp; Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
