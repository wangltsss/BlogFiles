{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next-reloaded/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1642990323693},{"_id":"source/.DS_Store","hash":"470e0674998852a0b062ff544ef37af28b290c60","modified":1663528232497},{"_id":"source/_drafts/Java的多线程.md","hash":"18ad26c23b51aed153dd09e294f753c2d1c67145","modified":1643300520664},{"_id":"source/_drafts/部署Flask项目.md","hash":"f16fa43fc5212f790a7809a547e20886d5175464","modified":1643300550477},{"_id":"source/_drafts/Pyserial库使用心得.md","hash":"c5ba99a77bb90017c9c30ac2b62fc27201e6326a","modified":1643300567511},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1663528246014},{"_id":"source/_posts/DeployAFlaskProj.md","hash":"ac4faae26d2651949d848de6013939e286bea57f","modified":1663536719478},{"_id":"source/_drafts/Latex技巧总结.md","hash":"634bd204a9ddfd72e8e464c0a7806b60ef1393af","modified":1643480704964},{"_id":"source/_posts/MultithreadingInJava.md","hash":"3e65345d85944a8390d8d8d3c618c06920d8d6ef","modified":1663536876578},{"_id":"source/_posts/NoteAboutPyserial.md","hash":"57c5946b1336a5a921909bc9b9dd96f5f32b00d0","modified":1663537058085},{"_id":"source/_posts/ConcurrentNotes.md","hash":"2d559f31f578365335d47dac2547761d30ccbf10","modified":1643478093823},{"_id":"source/categories/index.md","hash":"174980c2f1b27305e1d6116358ba1545129d0393","modified":1643080668350},{"_id":"source/tags/index.md","hash":"1f3fc33a704b974e5a1152215641361acbaa7d80","modified":1643080253912},{"_id":"themes/next-reloaded/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1643301664283},{"_id":"themes/next-reloaded/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1643301664285},{"_id":"themes/next-reloaded/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1643301664285},{"_id":"themes/next-reloaded/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1643301664286},{"_id":"themes/next-reloaded/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1643301664283},{"_id":"themes/next-reloaded/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1643301664283},{"_id":"themes/next-reloaded/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1643301664286},{"_id":"themes/next-reloaded/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1643301664286},{"_id":"themes/next-reloaded/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1643301664287},{"_id":"themes/next-reloaded/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1643301664305},{"_id":"themes/next-reloaded/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1643301664283},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1643301664284},{"_id":"themes/next-reloaded/_config.yml","hash":"99bb3c12cc67a2f694697143ea6ef7556998bb06","modified":1643478609921},{"_id":"themes/next-reloaded/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1643301664284},{"_id":"themes/next-reloaded/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1643301664291},{"_id":"themes/next-reloaded/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1643301664285},{"_id":"themes/next-reloaded/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1643301664285},{"_id":"themes/next-reloaded/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1643301664285},{"_id":"themes/next-reloaded/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1643301664285},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1643301664284},{"_id":"themes/next-reloaded/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1643301664285},{"_id":"themes/next-reloaded/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1643301664285},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1643301664285},{"_id":"themes/next-reloaded/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1643301664287},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1643301664287},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1643301664288},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1643301664288},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1643301664288},{"_id":"themes/next-reloaded/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1643301664288},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1643301664288},{"_id":"themes/next-reloaded/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1643301664288},{"_id":"themes/next-reloaded/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1643301664288},{"_id":"themes/next-reloaded/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1643301664291},{"_id":"themes/next-reloaded/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1643301664291},{"_id":"themes/next-reloaded/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1643301664292},{"_id":"themes/next-reloaded/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1643301664292},{"_id":"themes/next-reloaded/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1643301664292},{"_id":"themes/next-reloaded/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1643301664292},{"_id":"themes/next-reloaded/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1643301664292},{"_id":"themes/next-reloaded/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1643301664292},{"_id":"themes/next-reloaded/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1643301664293},{"_id":"themes/next-reloaded/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1643301664292},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1643301664293},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1643301664293},{"_id":"themes/next-reloaded/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1643301664293},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1643301664293},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1643301664293},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1643301664294},{"_id":"themes/next-reloaded/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1643301664294},{"_id":"themes/next-reloaded/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1643301664294},{"_id":"themes/next-reloaded/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1643301664294},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1643301664294},{"_id":"themes/next-reloaded/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1643301664294},{"_id":"themes/next-reloaded/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1643301664294},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1643301664295},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1643301664304},{"_id":"themes/next-reloaded/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1643301664305},{"_id":"themes/next-reloaded/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1643301664305},{"_id":"themes/next-reloaded/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1643301664305},{"_id":"themes/next-reloaded/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1643301664308},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1643301664305},{"_id":"themes/next-reloaded/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1643301664305},{"_id":"themes/next-reloaded/source/404.html","hash":"4c586bdbdce093e2b8d39226e7a52d548b4d0259","modified":1643301664310},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1643301664284},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1643301664284},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1643301664284},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1643301664284},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1643301664289},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1643301664289},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1643301664289},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1643301664289},{"_id":"themes/next-reloaded/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1643301664289},{"_id":"themes/next-reloaded/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1643301664289},{"_id":"themes/next-reloaded/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1643301664290},{"_id":"themes/next-reloaded/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1643301664290},{"_id":"themes/next-reloaded/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1643301664290},{"_id":"themes/next-reloaded/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1643301664290},{"_id":"themes/next-reloaded/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1643301664291},{"_id":"themes/next-reloaded/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1643301664290},{"_id":"themes/next-reloaded/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1643301664291},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1643301664295},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1643301664295},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1643301664295},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1643301664295},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"3bff156111194d68f473f32d07cd6d9e6953f361","modified":1643301664296},{"_id":"themes/next-reloaded/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1643301664297},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1643301664297},{"_id":"themes/next-reloaded/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1643301664299},{"_id":"themes/next-reloaded/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1643301664299},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1643301664299},{"_id":"themes/next-reloaded/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1643301664299},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1643301664302},{"_id":"themes/next-reloaded/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1643301664301},{"_id":"themes/next-reloaded/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1643301664305},{"_id":"themes/next-reloaded/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1643301664308},{"_id":"themes/next-reloaded/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1643301664308},{"_id":"themes/next-reloaded/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1643301664303},{"_id":"themes/next-reloaded/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1643301664308},{"_id":"themes/next-reloaded/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1643301664308},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1643301664308},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1643301664303},{"_id":"themes/next-reloaded/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1643301664308},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1643301664309},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1643301664309},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1643301664309},{"_id":"themes/next-reloaded/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1643301664309},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1643301664309},{"_id":"themes/next-reloaded/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1643301664309},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1643301664309},{"_id":"themes/next-reloaded/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1643301664309},{"_id":"themes/next-reloaded/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1643301664310},{"_id":"themes/next-reloaded/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1643301664319},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1643301664322},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1643301664323},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1643301664323},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1643301664323},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1643301664323},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1643301664323},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1643301664323},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1643301664324},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1643301664324},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1643301664324},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1643301664324},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1643301664324},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1643301664324},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1643301664324},{"_id":"themes/next-reloaded/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1643301664325},{"_id":"themes/next-reloaded/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1643301664325},{"_id":"themes/next-reloaded/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1643301664325},{"_id":"themes/next-reloaded/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1643301664325},{"_id":"themes/next-reloaded/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1643301664325},{"_id":"themes/next-reloaded/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1643301664296},{"_id":"themes/next-reloaded/layout/_partials/head/head.swig","hash":"88ae469183e58836413df64e7a17fec1120387a1","modified":1643301664296},{"_id":"themes/next-reloaded/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1643301664296},{"_id":"themes/next-reloaded/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1643301664296},{"_id":"themes/next-reloaded/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1643301664296},{"_id":"themes/next-reloaded/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1643301664297},{"_id":"themes/next-reloaded/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1643301664297},{"_id":"themes/next-reloaded/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1643301664297},{"_id":"themes/next-reloaded/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1643301664326},{"_id":"themes/next-reloaded/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1643301664297},{"_id":"themes/next-reloaded/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1643301664297},{"_id":"themes/next-reloaded/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1643301664298},{"_id":"themes/next-reloaded/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1643301664298},{"_id":"themes/next-reloaded/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1643301664298},{"_id":"themes/next-reloaded/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1643301664298},{"_id":"themes/next-reloaded/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1643301664298},{"_id":"themes/next-reloaded/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1643301664298},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1643301664298},{"_id":"themes/next-reloaded/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1643301664326},{"_id":"themes/next-reloaded/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1643301664298},{"_id":"themes/next-reloaded/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1643301664299},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1643301664299},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1643301664301},{"_id":"themes/next-reloaded/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1643301664300},{"_id":"themes/next-reloaded/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1643301664301},{"_id":"themes/next-reloaded/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1643301664301},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1643301664301},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1643301664301},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1643301664301},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1643301664302},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1643301664302},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1643301664302},{"_id":"themes/next-reloaded/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1643301664302},{"_id":"themes/next-reloaded/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1643301664302},{"_id":"themes/next-reloaded/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1643301664302},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1643301664303},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1643301664303},{"_id":"themes/next-reloaded/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1643301664303},{"_id":"themes/next-reloaded/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1643301664303},{"_id":"themes/next-reloaded/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1643301664304},{"_id":"themes/next-reloaded/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1643301664304},{"_id":"themes/next-reloaded/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1643301664304},{"_id":"themes/next-reloaded/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1643301664304},{"_id":"themes/next-reloaded/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1643301664304},{"_id":"themes/next-reloaded/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1643301664306},{"_id":"themes/next-reloaded/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1643301664304},{"_id":"themes/next-reloaded/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1643301664306},{"_id":"themes/next-reloaded/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1643301664306},{"_id":"themes/next-reloaded/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1643301664306},{"_id":"themes/next-reloaded/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1643301664306},{"_id":"themes/next-reloaded/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1643301664306},{"_id":"themes/next-reloaded/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1643301664306},{"_id":"themes/next-reloaded/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1643301664307},{"_id":"themes/next-reloaded/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1643301664307},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1643301664322},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1643301664322},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1643301664322},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1643301664322},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1643301664322},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1643301664326},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1643301664326},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1643301664311},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1643301664311},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1643301664311},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1643301664328},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1643301664328},{"_id":"themes/next-reloaded/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1643301664317},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1643301664317},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1643301664317},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1643301664319},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1643301664320},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1643301664321},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1643301664322},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1643301664327},{"_id":"themes/next-reloaded/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1643301664311},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1643301664311},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1643301664311},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1643301664327},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1643301664312},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1643301664313},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1643301664314},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1643301664314},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1643301664314},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1643301664314},{"_id":"themes/next-reloaded/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1643301664314},{"_id":"themes/next-reloaded/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1643301664314},{"_id":"themes/next-reloaded/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1643301664315},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1643301664316},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1643301664317},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1643301664317},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1643301664317},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1643301664317},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1643301664318},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1643301664319},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1643301664319},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1643301664319},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1643301664319},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1643301664319},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1643301664327},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1643301664327},{"_id":"public/search.xml","hash":"6ecf9f7fc2dd8651efd77394398c6e2e8f4c5f13","modified":1663535971160},{"_id":"public/categories/index.html","hash":"7b7a5b85ca058cf3b9accb2444b6d42ec2050260","modified":1663535971160},{"_id":"public/tags/index.html","hash":"fbdcf7a8e62f09090d4561087cfdc6213c9a7498","modified":1663535971160},{"_id":"public/categories/Programming-Algorithms/index.html","hash":"526a737345558d006699eac21e299c71e916aa93","modified":1663535971160},{"_id":"public/categories/Linux-Shell/index.html","hash":"7819b9466f4048561007a254dbc06e02c33ab942","modified":1663535971160},{"_id":"public/archives/index.html","hash":"356d0753a6dd80a71ecccc3bd08893732c49ff01","modified":1663535971160},{"_id":"public/archives/2021/index.html","hash":"70cb2672a658cacada7834d2853aaa3ebd7ad945","modified":1663535971160},{"_id":"public/archives/2021/07/index.html","hash":"ad759067b0dce820ca7d5780e87748568d257434","modified":1663535971160},{"_id":"public/archives/2021/08/index.html","hash":"451de4ea86dfb71b9372ac6d308a32e90ad43499","modified":1663535971160},{"_id":"public/archives/2022/index.html","hash":"2b7bd9a9ccf4d557d9bcd415e1ce6e11e9dd49b8","modified":1663535971160},{"_id":"public/archives/2022/01/index.html","hash":"ebbfb0286d23c6d6b85fb2fb89edb6f8ad8a59e9","modified":1663535971160},{"_id":"public/tags/Java/index.html","hash":"dd2454ea938ea8c9dec0de9cf0570f2946b52046","modified":1663535971160},{"_id":"public/tags/Multithreading/index.html","hash":"c7e1e275a5ed57fa9b1a37dd5ec92b768780eed2","modified":1663535971160},{"_id":"public/tags/Python/index.html","hash":"ff094ce9ec9cac2ab9c4b791c672bb7bf3e9c4b3","modified":1663535971160},{"_id":"public/tags/Linux/index.html","hash":"33dedd15c4dd73b5f83b5448987a81953a8982f1","modified":1663535971160},{"_id":"public/tags/concurrent-system/index.html","hash":"271a55e401f532d4c225613ffd69a7016eccb31d","modified":1663535971160},{"_id":"public/tags/C/index.html","hash":"4f1ab03473303f4df193e141b70c82d5c44fecb2","modified":1663535971160},{"_id":"public/tags/operating-system/index.html","hash":"454cef8460a02c7e62e1bbcb68d1309f40b552af","modified":1663535971160},{"_id":"public/2022/01/26/ConcurrentNotes/index.html","hash":"a778da683eb080418aafeaec493348347074e6db","modified":1663535971160},{"_id":"public/2022/01/22/MultithreadingInJava/index.html","hash":"599cf4827a8b01f045508b14cfccfae3732e2585","modified":1663535971160},{"_id":"public/2021/08/17/NoteAboutPyserial/index.html","hash":"00bcb1f6292f4ba495bcdec591c53dd4c81d7b68","modified":1663535971160},{"_id":"public/2021/07/03/DeployAFlaskProj/index.html","hash":"86ce21785c37328f8743820447adfe7737497947","modified":1663535971160},{"_id":"public/index.html","hash":"f3f2985e276c8fd9d2e365ae56138fc151e9cb44","modified":1663535971160},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1663535971160},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1663535971160},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1663535971160},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1663535971160},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1663535971160},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1663535971160},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1663535971160},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1663535971160},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1663535971160},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1663535971160},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1663535971160},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1663535971160},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1663535971160},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1663535971160},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1663535971160},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1663535971160},{"_id":"public/404.html","hash":"4c586bdbdce093e2b8d39226e7a52d548b4d0259","modified":1663535971160},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1663535971160},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1663535971160},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1663535971160},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1663535971160},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1663535971160},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1663535971160},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1663535971160},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1663535971160},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1663535971160},{"_id":"public/css/main.css","hash":"bc9bddb89d06bf1e5ed06f7028e94c95f86e8191","modified":1663535971160},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1663535971160},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1663535971160},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1663535971160}],"Category":[{"name":"Programming & Algorithms","_id":"cl87ud6jc0004vnude2o3fmus"},{"name":"Linux & Shell","_id":"cl87ud6jf0009vnudfqr5cx1r"},{"name":"Dictionaries","_id":"cl87ud6jh000evnud1lbca6yv"}],"Data":[],"Page":[{"title":"分类","date":"2022-01-25T03:05:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-01-24 22:05:33\ntype: \"categories\"\n---\n","updated":"2022-01-25T03:17:48.350Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl87ud6j50000vnud4vpy4tua","content":"\n","site":{"data":{}},"length":0,"excerpt":"","more":"\n"},{"title":"标签","date":"2022-01-25T03:10:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-01-24 22:10:30\ntype: tags\n---\n","updated":"2022-01-25T03:10:53.912Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl87ud6jb0002vnudaw3e653b","content":"\n","site":{"data":{}},"length":0,"excerpt":"","more":"\n"}],"Post":[{"title":"Java多线程的学习笔记(Multithreading in Java)(未完)","date":"2022-01-23T02:16:08.000Z","_content":"\n# 写在前边\n前一阵子想用Java从头开始写一个自己的网站，于是找了一个教程。教程的第一步就是入门servlet\n，自己了解了一下发现需要熟悉多线程。正好这学期有一门课是以C语言为基础讲并发系统的，干脆自己在研究一下Java多线程。\n\n<!--more-->\n\n# 多线程基础\n在计算机中，通常运行的每个应用被叫做一个进程(Process)。而每个进程可以包含多个子进程，叫做线程(Thread)。例如在音乐播放器中，播放音乐需要一个线程，显示歌词又需要一个线程。一个进程至少包含一个线程，也可以包含多个线程。\n\n# Java的多线程\n\n## 多线程流程\n\n在创建Thread实例后，线程会等待```start()```的执行以进入就绪状态(Ready)。</br>\n进入就绪状态后，该线程会处于就绪队列中，等待被调度。 </br>\n当该就绪状态的线程获取CPU资源后，就可以调用```run()```方法，此时该线程处于运行状态(Running)。</br>\n当一个线程占用资源时间耗尽，或者主动执行```wait()```等方法后，就会进入阻塞状态(Blocked)。处于阻塞状态的线程再重新获取CPU资源之前，会一直处于阻塞状态。\n\n## 新建```Thread```实例\n\n可以通过\n\n```java\npublic class ThreadRunnable extends Thread{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\n或者\n\n```java\npublic class ThreadRunnable implements Runnable{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\n\n## 线程的同步\n### 原子(atomic)操作\n语句如</br>\n\n```java\nn = n + 1;\n```\n\n看似为单个语句，但其实其中至少包含了三步:\n\n```\n// 不标准的Assembly.\nld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.\naddi x5, x5, 1\t\t// n = n + 1.\nsd x5, sp(0)\t\t// save n = n + 1 back.\n```\n\n原子操作为不可被分割的指令，如:\n\n```java\nint n;   //---  addi sp sp -8\t\tmake room on the stack for one int.\n```\n\n### 多线程中共享变量(shared variable)的问题\n如果将```n```初始化为0，同时创建两个线程，一个线程（线程1）负责执行10000次```n += 1```，另一个（线程2）负责执行10000次```n -= 1```，最后```n```的值每次都会不同。</br>\n这是因为，非常可能地，在线程1读取到```n = 0```后，线程2立刻抢占了CPU资源，并且同样读取到了```n = 0```（因为线程1还来不及对```n```做修改），并且执行了```n -= 1```并存储回```n```。此时线程1重新获得资源，但此时线程1已经进行过读取操作（```n = 0```），所以最后经过```n += 1```和```n -= 1```后，```n```此时的值为1.\n\n### synchronized关键字\n\n```java\nsynchronized(lock object){\n\t// clauses\n}\n```\n```{```会自动为```synchronized```内部的语句加锁，而```}```会自动解锁。</br>\n注意，```lock```实例与```synchronized```内部的语句无关，该lock实例可以为任何对象的实例。\n在```synchronized```结构中归属于同一个```lock```实例的语句不能被同时执行。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_drafts/Java的多线程.md","raw":"---\ntitle: Java多线程的学习笔记(Multithreading in Java)(未完)\ndate: 2022-01-22 21:16:08\ncategories: Programming & Algorithms\ntags:\n- Java\n- Multithreading\n---\n\n# 写在前边\n前一阵子想用Java从头开始写一个自己的网站，于是找了一个教程。教程的第一步就是入门servlet\n，自己了解了一下发现需要熟悉多线程。正好这学期有一门课是以C语言为基础讲并发系统的，干脆自己在研究一下Java多线程。\n\n<!--more-->\n\n# 多线程基础\n在计算机中，通常运行的每个应用被叫做一个进程(Process)。而每个进程可以包含多个子进程，叫做线程(Thread)。例如在音乐播放器中，播放音乐需要一个线程，显示歌词又需要一个线程。一个进程至少包含一个线程，也可以包含多个线程。\n\n# Java的多线程\n\n## 多线程流程\n\n在创建Thread实例后，线程会等待```start()```的执行以进入就绪状态(Ready)。</br>\n进入就绪状态后，该线程会处于就绪队列中，等待被调度。 </br>\n当该就绪状态的线程获取CPU资源后，就可以调用```run()```方法，此时该线程处于运行状态(Running)。</br>\n当一个线程占用资源时间耗尽，或者主动执行```wait()```等方法后，就会进入阻塞状态(Blocked)。处于阻塞状态的线程再重新获取CPU资源之前，会一直处于阻塞状态。\n\n## 新建```Thread```实例\n\n可以通过\n\n```java\npublic class ThreadRunnable extends Thread{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\n或者\n\n```java\npublic class ThreadRunnable implements Runnable{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\n\n## 线程的同步\n### 原子(atomic)操作\n语句如</br>\n\n```java\nn = n + 1;\n```\n\n看似为单个语句，但其实其中至少包含了三步:\n\n```\n// 不标准的Assembly.\nld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.\naddi x5, x5, 1\t\t// n = n + 1.\nsd x5, sp(0)\t\t// save n = n + 1 back.\n```\n\n原子操作为不可被分割的指令，如:\n\n```java\nint n;   //---  addi sp sp -8\t\tmake room on the stack for one int.\n```\n\n### 多线程中共享变量(shared variable)的问题\n如果将```n```初始化为0，同时创建两个线程，一个线程（线程1）负责执行10000次```n += 1```，另一个（线程2）负责执行10000次```n -= 1```，最后```n```的值每次都会不同。</br>\n这是因为，非常可能地，在线程1读取到```n = 0```后，线程2立刻抢占了CPU资源，并且同样读取到了```n = 0```（因为线程1还来不及对```n```做修改），并且执行了```n -= 1```并存储回```n```。此时线程1重新获得资源，但此时线程1已经进行过读取操作（```n = 0```），所以最后经过```n += 1```和```n -= 1```后，```n```此时的值为1.\n\n### synchronized关键字\n\n```java\nsynchronized(lock object){\n\t// clauses\n}\n```\n```{```会自动为```synchronized```内部的语句加锁，而```}```会自动解锁。</br>\n注意，```lock```实例与```synchronized```内部的语句无关，该lock实例可以为任何对象的实例。\n在```synchronized```结构中归属于同一个```lock```实例的语句不能被同时执行。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Java的多线程","published":0,"updated":"2022-01-27T16:22:00.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87ud6j80001vnudbsih1lu9","content":"<h1 id=\"写在前边\">写在前边</h1>\n<p>前一阵子想用Java从头开始写一个自己的网站，于是找了一个教程。教程的第一步就是入门servlet ，自己了解了一下发现需要熟悉多线程。正好这学期有一门课是以C语言为基础讲并发系统的，干脆自己在研究一下Java多线程。</p>\n<span id=\"more\"></span>\n<h1 id=\"多线程基础\">多线程基础</h1>\n<p>在计算机中，通常运行的每个应用被叫做一个进程(Process)。而每个进程可以包含多个子进程，叫做线程(Thread)。例如在音乐播放器中，播放音乐需要一个线程，显示歌词又需要一个线程。一个进程至少包含一个线程，也可以包含多个线程。</p>\n<h1 id=\"java的多线程\">Java的多线程</h1>\n<h2 id=\"多线程流程\">多线程流程</h2>\n<p>在创建Thread实例后，线程会等待<code>start()</code>的执行以进入就绪状态(Ready)。</br> 进入就绪状态后，该线程会处于就绪队列中，等待被调度。 </br> 当该就绪状态的线程获取CPU资源后，就可以调用<code>run()</code>方法，此时该线程处于运行状态(Running)。</br> 当一个线程占用资源时间耗尽，或者主动执行<code>wait()</code>等方法后，就会进入阻塞状态(Blocked)。处于阻塞状态的线程再重新获取CPU资源之前，会一直处于阻塞状态。</p>\n<h2 id=\"新建thread实例\">新建<code>Thread</code>实例</h2>\n<p>可以通过</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程的同步\">线程的同步</h2>\n<h3 id=\"原子atomic操作\">原子(atomic)操作</h3>\n<p>语句如</br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = n + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>看似为单个语句，但其实其中至少包含了三步:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 不标准的Assembly.</span><br><span class=\"line\">ld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.</span><br><span class=\"line\">addi x5, x5, 1\t\t// n = n + 1.</span><br><span class=\"line\">sd x5, sp(0)\t\t// save n = n + 1 back.</span><br></pre></td></tr></table></figure>\n<p>原子操作为不可被分割的指令，如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;   <span class=\"comment\">//---  addi sp sp -8\t\tmake room on the stack for one int.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多线程中共享变量shared-variable的问题\">多线程中共享变量(shared variable)的问题</h3>\n<p>如果将<code>n</code>初始化为0，同时创建两个线程，一个线程（线程1）负责执行10000次<code>n += 1</code>，另一个（线程2）负责执行10000次<code>n -= 1</code>，最后<code>n</code>的值每次都会不同。</br> 这是因为，非常可能地，在线程1读取到<code>n = 0</code>后，线程2立刻抢占了CPU资源，并且同样读取到了<code>n = 0</code>（因为线程1还来不及对<code>n</code>做修改），并且执行了<code>n -= 1</code>并存储回<code>n</code>。此时线程1重新获得资源，但此时线程1已经进行过读取操作（<code>n = 0</code>），所以最后经过<code>n += 1</code>和<code>n -= 1</code>后，<code>n</code>此时的值为1.</p>\n<h3 id=\"synchronized关键字\">synchronized关键字</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock object)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// clauses</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>&#123;</code>会自动为<code>synchronized</code>内部的语句加锁，而<code>&#125;</code>会自动解锁。</br> 注意，<code>lock</code>实例与<code>synchronized</code>内部的语句无关，该lock实例可以为任何对象的实例。 在<code>synchronized</code>结构中归属于同一个<code>lock</code>实例的语句不能被同时执行。</p>\n","site":{"data":{}},"length":1364,"excerpt":"<h1 id=\"写在前边\">写在前边</h1>\n<p>前一阵子想用Java从头开始写一个自己的网站，于是找了一个教程。教程的第一步就是入门servlet ，自己了解了一下发现需要熟悉多线程。正好这学期有一门课是以C语言为基础讲并发系统的，干脆自己在研究一下Java多线程。</p>","more":"<h1 id=\"多线程基础\">多线程基础</h1>\n<p>在计算机中，通常运行的每个应用被叫做一个进程(Process)。而每个进程可以包含多个子进程，叫做线程(Thread)。例如在音乐播放器中，播放音乐需要一个线程，显示歌词又需要一个线程。一个进程至少包含一个线程，也可以包含多个线程。</p>\n<h1 id=\"java的多线程\">Java的多线程</h1>\n<h2 id=\"多线程流程\">多线程流程</h2>\n<p>在创建Thread实例后，线程会等待<code>start()</code>的执行以进入就绪状态(Ready)。</br> 进入就绪状态后，该线程会处于就绪队列中，等待被调度。 </br> 当该就绪状态的线程获取CPU资源后，就可以调用<code>run()</code>方法，此时该线程处于运行状态(Running)。</br> 当一个线程占用资源时间耗尽，或者主动执行<code>wait()</code>等方法后，就会进入阻塞状态(Blocked)。处于阻塞状态的线程再重新获取CPU资源之前，会一直处于阻塞状态。</p>\n<h2 id=\"新建thread实例\">新建<code>Thread</code>实例</h2>\n<p>可以通过</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线程的同步\">线程的同步</h2>\n<h3 id=\"原子atomic操作\">原子(atomic)操作</h3>\n<p>语句如</br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = n + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>看似为单个语句，但其实其中至少包含了三步:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 不标准的Assembly.</span><br><span class=\"line\">ld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.</span><br><span class=\"line\">addi x5, x5, 1\t\t// n = n + 1.</span><br><span class=\"line\">sd x5, sp(0)\t\t// save n = n + 1 back.</span><br></pre></td></tr></table></figure>\n<p>原子操作为不可被分割的指令，如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;   <span class=\"comment\">//---  addi sp sp -8\t\tmake room on the stack for one int.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多线程中共享变量shared-variable的问题\">多线程中共享变量(shared variable)的问题</h3>\n<p>如果将<code>n</code>初始化为0，同时创建两个线程，一个线程（线程1）负责执行10000次<code>n += 1</code>，另一个（线程2）负责执行10000次<code>n -= 1</code>，最后<code>n</code>的值每次都会不同。</br> 这是因为，非常可能地，在线程1读取到<code>n = 0</code>后，线程2立刻抢占了CPU资源，并且同样读取到了<code>n = 0</code>（因为线程1还来不及对<code>n</code>做修改），并且执行了<code>n -= 1</code>并存储回<code>n</code>。此时线程1重新获得资源，但此时线程1已经进行过读取操作（<code>n = 0</code>），所以最后经过<code>n += 1</code>和<code>n -= 1</code>后，<code>n</code>此时的值为1.</p>\n<h3 id=\"synchronized关键字\">synchronized关键字</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock object)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// clauses</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>&#123;</code>会自动为<code>synchronized</code>内部的语句加锁，而<code>&#125;</code>会自动解锁。</br> 注意，<code>lock</code>实例与<code>synchronized</code>内部的语句无关，该lock实例可以为任何对象的实例。 在<code>synchronized</code>结构中归属于同一个<code>lock</code>实例的语句不能被同时执行。</p>"},{"title":"在CentOS 8上部署基于Flask实现的项目","date":"2021-07-03T16:06:54.000Z","_content":"\n\n# 写在前面\n写这篇文章是因为我在自己部署项目的时候，遇到了很多仅靠别人的博客和回答解决不了的问题。于是在自己解决了之后，就希望能够详细的记录下来，既能方便其他可能跟我一样基础比较差的人，也预防将来的自己忘掉了，又得一遍遍的翻枯燥的官方文档。\n<!--more-->\n# 关于服务器\n我购买的是阿里云的服务器，今年618期间很便宜，最低配置的60块不到就能买上一年。\n操作系统我选择了CentOS 8。原因无他，一直以来用的都是Cent OS，且更高的版本号意味着更好的兼容性与稳定性（测试版除外）。\n# 关于环境\n以下这些操作，建议在本地电脑完成之后，再使用git同步到服务器端。\n\n非常不建议用户直接使用root账户来进行以下操作。\n\n非常建议用户创建一个有sudo权限的账户来进行以下操作。\n## python版本\n在Cent OS下，建议直接使用yum命令进行下载。yum命令提供了4个版本的python可供下载:\n\n - python2 \n - python36\n - python38\n - python39\n \n 例如下载python 3.9时，直接使用命令\n ```\n yum install python39\n ```\n 如果提示权限不够记得加上sudo。\n \n 版本可以根据个人使用习惯来进行选择。我个人一直使用的是python 3.8。\n\n不推荐使用python2，尽管我看到的很多教程都说python 2与Flask和uWSGI相性更佳，但实际使用下来python3也完全没有出现不兼容的问题。\n\n## 虚拟环境\n为什么要创建虚拟环境？\n\n虚拟环境的好处在于安装在其中的插件不会影响到你电脑上的本地配置，也独立于其他的虚拟环境。例如当你的一个项目需要Fabric 1.x，而另一个需要Fabric 2.x的时候，如果你使用了虚拟环境，他们互相不会冲突。但如果不使用虚拟环境，你就需要删掉其中一个版本，再安装另一个版本以避免兼容性问题。\n\n在python 3中，官方文档建议用户使用\n```\npython3 -m venv (/path to new virtual environment)\n```\n命令来创建虚拟环境。\n\n例如，你可以使用\n```\npython3 -m venv venv\n```\n来在当前目录下创建一个目录名为venv的虚拟环境。\n\n创建完成之后，进入到venv文件，使用\n```\nsource ./bin/activate\n```\n来激活虚拟环境，处在虚拟环境中时，直接输入\n```\ndeactivate\n```\n来退出虚拟环境。\n\n## 依赖包\n这一步需要等你的Flask项目已经万事俱备，只差部署到服务器端的时候再操作，写在这里只是因为与上边的一块内容有些许关联。\n\n用\n```\npip freeze > requirements.txt\n```\n命令可以提取当前所有依赖包，并将其写入requirements.txt文件中，这样在服务器端安装时，可以直接使用\n```\npip install -r requiremtns.txt\n```\n安装你在本地电脑上的所有依赖包。\n需要注意的是如果提示权限不够，pip的官方文档并不提倡使用sudo，而是建议用户使用“ --user ”参数。这个参数的含义是将包安装到用户主目录，而非python的安装目录下。\n# 安装nginx\n由于nginx在近几年变得越来越流行，现在yum的库里已经包含了nginx，不再需要我们手动添加了。\n\n直接使用\n```\nsudo yum install nginx\n```\n来安装。\n\n安装完可以使用\n```\nnginx -v\n```\n命令来检查是否安装成功。\n\n以下是几个常用命令：\n```\nsudo systemctl enable nginx //开机启动nginx\nsudo systemctl start nginx //启动nginx\nsudo systemctl stop nginx //关闭nginx\nsudo systemctl restart nginx //重新加载nginx\nsudo systemctl status nginx //查看nginx状态\n```\n关于nginx的配置问题会在最后讲解。\n\n# 安装uwsgi\n关于uwsgi的作用以及他与nginx的区别，想要了解的可以参考这篇文章：\n[nginx和uwsgi的区别和作用](https://www.dazhuanlan.com/2019/10/11/5d9f74310baf0/).\n文章讲的很好，也很详细，我就不在此赘述了。\n\n安装uwsgi可以使用\n```\npip install uwsgi\n```\n命令直接进行安装。\n\n安装完之后可以使用\n```\nuwsgi --version\n```\n命令来确认是否安装成功。\n\nuwsgi的配置问题也会在最后讲解。\n\n# 部署到服务器\n连接到你的服务器，进入到你想要放置你项目位置的文件夹。\n\n如果对此犹豫不决，我建议你就放在你当前用户的主目录下。\n\n按个人喜好，使用git或者scp或者ftp传输工具将项目上传到服务器上。\n\n如果你的服务器上没有跟你本地版本相同的python，你需要在服务器端再次重复上述安装python的步骤。\n\n在确保python版本一致之后，你可以使用上边的\n```\npip install -r requirements.txt\n```\t\n来安装所有依赖包了。\n\n\n## uwsgi初始化文件\n在你项目的根目录创建一个.ini文件，名称最好能体现他的作用，例如uwsgi.ini或项目名.ini。\n在里边写上如下内容：\n```\n[uwsgi]\nsocket=127.0.0.1:5000 //你可以选择不同的端口，下边还会用到。\n\nchdir=/home/wst/wms //你的项目的根目录\n\nwsgi-file=app.py //你的启动文件，注意这里是相对项目根目录的地址。\n\ncallable=app //启动文件实例的名称\n\nprocesses=4 \n\nthreads=2\n\nmaster=true\n\nstats=127.0.0.1:9191\n\n```\n以上标有注释的请根据实际情况修改，无注释的，也没有需求理解这些参数的可以照抄。\n\n修改完后记得删掉我的注释。\n\n## nginx配置\nnginx的配置文件\" nginx.conf \"通常存在于\" /etc/nginx \"目录下，如果你找不到，可以使用\n```\nsudo nginx -t\n```\n命令来查看他的位置。\n\n使用文本编辑器打开它\n```\nsudo vim /etc/nginx/nginx.conf\n```\n会看到类似下面的代码\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers PROFILE=SYSTEM;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n\n}\n```\n将\" server \"内的\" server_name \"改成你的域名或者公网地址；\n\n在\" root \"下增加两行，分别为\"access_log\"和\"error_log\"；\n\n在\" location / \"内启用\" uwsgi_params \"。\n\n```\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  xxx.xxx.xxx.xxx;\n        root         /usr/share/nginx/html;\n        access_log  /home/wst/wms/logs/access.log;\n        error_log  /home/wst/wms/logs/error.log;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n       \t\tinclude     uwsgi_params;\n        \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致\n\t        uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址\n\t        uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址\n\t        uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n然后使用\n```\nsudo nginx -t\n```\n命令检查是否有语法错误。\n\n如果没有报错，输入\n```\nsudo systemctl restart nginx\n```\n在此之后，访问你的公网地址，你应该就能看到你的网页了。\n\n下一步就是在服务器端启用监管以重启挂掉的程序，和使用fabric或jenkins来进行持续集成，避免每次在本地更新代码后，还需要进行冗余的操作来将其同步到云端。这部分内容我会在之后完成相应的工作后也写一篇博客记录。\n\n","source":"_drafts/部署Flask项目.md","raw":"---\ntitle: 在CentOS 8上部署基于Flask实现的项目\ndate: 2021-07-03 12:06:54\ncategories: Linux & Shell\ntags:\n- Python\n- Linux\n---\n\n\n# 写在前面\n写这篇文章是因为我在自己部署项目的时候，遇到了很多仅靠别人的博客和回答解决不了的问题。于是在自己解决了之后，就希望能够详细的记录下来，既能方便其他可能跟我一样基础比较差的人，也预防将来的自己忘掉了，又得一遍遍的翻枯燥的官方文档。\n<!--more-->\n# 关于服务器\n我购买的是阿里云的服务器，今年618期间很便宜，最低配置的60块不到就能买上一年。\n操作系统我选择了CentOS 8。原因无他，一直以来用的都是Cent OS，且更高的版本号意味着更好的兼容性与稳定性（测试版除外）。\n# 关于环境\n以下这些操作，建议在本地电脑完成之后，再使用git同步到服务器端。\n\n非常不建议用户直接使用root账户来进行以下操作。\n\n非常建议用户创建一个有sudo权限的账户来进行以下操作。\n## python版本\n在Cent OS下，建议直接使用yum命令进行下载。yum命令提供了4个版本的python可供下载:\n\n - python2 \n - python36\n - python38\n - python39\n \n 例如下载python 3.9时，直接使用命令\n ```\n yum install python39\n ```\n 如果提示权限不够记得加上sudo。\n \n 版本可以根据个人使用习惯来进行选择。我个人一直使用的是python 3.8。\n\n不推荐使用python2，尽管我看到的很多教程都说python 2与Flask和uWSGI相性更佳，但实际使用下来python3也完全没有出现不兼容的问题。\n\n## 虚拟环境\n为什么要创建虚拟环境？\n\n虚拟环境的好处在于安装在其中的插件不会影响到你电脑上的本地配置，也独立于其他的虚拟环境。例如当你的一个项目需要Fabric 1.x，而另一个需要Fabric 2.x的时候，如果你使用了虚拟环境，他们互相不会冲突。但如果不使用虚拟环境，你就需要删掉其中一个版本，再安装另一个版本以避免兼容性问题。\n\n在python 3中，官方文档建议用户使用\n```\npython3 -m venv (/path to new virtual environment)\n```\n命令来创建虚拟环境。\n\n例如，你可以使用\n```\npython3 -m venv venv\n```\n来在当前目录下创建一个目录名为venv的虚拟环境。\n\n创建完成之后，进入到venv文件，使用\n```\nsource ./bin/activate\n```\n来激活虚拟环境，处在虚拟环境中时，直接输入\n```\ndeactivate\n```\n来退出虚拟环境。\n\n## 依赖包\n这一步需要等你的Flask项目已经万事俱备，只差部署到服务器端的时候再操作，写在这里只是因为与上边的一块内容有些许关联。\n\n用\n```\npip freeze > requirements.txt\n```\n命令可以提取当前所有依赖包，并将其写入requirements.txt文件中，这样在服务器端安装时，可以直接使用\n```\npip install -r requiremtns.txt\n```\n安装你在本地电脑上的所有依赖包。\n需要注意的是如果提示权限不够，pip的官方文档并不提倡使用sudo，而是建议用户使用“ --user ”参数。这个参数的含义是将包安装到用户主目录，而非python的安装目录下。\n# 安装nginx\n由于nginx在近几年变得越来越流行，现在yum的库里已经包含了nginx，不再需要我们手动添加了。\n\n直接使用\n```\nsudo yum install nginx\n```\n来安装。\n\n安装完可以使用\n```\nnginx -v\n```\n命令来检查是否安装成功。\n\n以下是几个常用命令：\n```\nsudo systemctl enable nginx //开机启动nginx\nsudo systemctl start nginx //启动nginx\nsudo systemctl stop nginx //关闭nginx\nsudo systemctl restart nginx //重新加载nginx\nsudo systemctl status nginx //查看nginx状态\n```\n关于nginx的配置问题会在最后讲解。\n\n# 安装uwsgi\n关于uwsgi的作用以及他与nginx的区别，想要了解的可以参考这篇文章：\n[nginx和uwsgi的区别和作用](https://www.dazhuanlan.com/2019/10/11/5d9f74310baf0/).\n文章讲的很好，也很详细，我就不在此赘述了。\n\n安装uwsgi可以使用\n```\npip install uwsgi\n```\n命令直接进行安装。\n\n安装完之后可以使用\n```\nuwsgi --version\n```\n命令来确认是否安装成功。\n\nuwsgi的配置问题也会在最后讲解。\n\n# 部署到服务器\n连接到你的服务器，进入到你想要放置你项目位置的文件夹。\n\n如果对此犹豫不决，我建议你就放在你当前用户的主目录下。\n\n按个人喜好，使用git或者scp或者ftp传输工具将项目上传到服务器上。\n\n如果你的服务器上没有跟你本地版本相同的python，你需要在服务器端再次重复上述安装python的步骤。\n\n在确保python版本一致之后，你可以使用上边的\n```\npip install -r requirements.txt\n```\t\n来安装所有依赖包了。\n\n\n## uwsgi初始化文件\n在你项目的根目录创建一个.ini文件，名称最好能体现他的作用，例如uwsgi.ini或项目名.ini。\n在里边写上如下内容：\n```\n[uwsgi]\nsocket=127.0.0.1:5000 //你可以选择不同的端口，下边还会用到。\n\nchdir=/home/wst/wms //你的项目的根目录\n\nwsgi-file=app.py //你的启动文件，注意这里是相对项目根目录的地址。\n\ncallable=app //启动文件实例的名称\n\nprocesses=4 \n\nthreads=2\n\nmaster=true\n\nstats=127.0.0.1:9191\n\n```\n以上标有注释的请根据实际情况修改，无注释的，也没有需求理解这些参数的可以照抄。\n\n修改完后记得删掉我的注释。\n\n## nginx配置\nnginx的配置文件\" nginx.conf \"通常存在于\" /etc/nginx \"目录下，如果你找不到，可以使用\n```\nsudo nginx -t\n```\n命令来查看他的位置。\n\n使用文本编辑器打开它\n```\nsudo vim /etc/nginx/nginx.conf\n```\n会看到类似下面的代码\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers PROFILE=SYSTEM;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n\n}\n```\n将\" server \"内的\" server_name \"改成你的域名或者公网地址；\n\n在\" root \"下增加两行，分别为\"access_log\"和\"error_log\"；\n\n在\" location / \"内启用\" uwsgi_params \"。\n\n```\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  xxx.xxx.xxx.xxx;\n        root         /usr/share/nginx/html;\n        access_log  /home/wst/wms/logs/access.log;\n        error_log  /home/wst/wms/logs/error.log;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n       \t\tinclude     uwsgi_params;\n        \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致\n\t        uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址\n\t        uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址\n\t        uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n然后使用\n```\nsudo nginx -t\n```\n命令检查是否有语法错误。\n\n如果没有报错，输入\n```\nsudo systemctl restart nginx\n```\n在此之后，访问你的公网地址，你应该就能看到你的网页了。\n\n下一步就是在服务器端启用监管以重启挂掉的程序，和使用fabric或jenkins来进行持续集成，避免每次在本地更新代码后，还需要进行冗余的操作来将其同步到云端。这部分内容我会在之后完成相应的工作后也写一篇博客记录。\n\n","slug":"部署Flask项目","published":0,"updated":"2022-01-27T16:22:30.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87ud6jb0003vnudb1kbefbc","content":"<h1 id=\"写在前面\">写在前面</h1>\n<p>写这篇文章是因为我在自己部署项目的时候，遇到了很多仅靠别人的博客和回答解决不了的问题。于是在自己解决了之后，就希望能够详细的记录下来，既能方便其他可能跟我一样基础比较差的人，也预防将来的自己忘掉了，又得一遍遍的翻枯燥的官方文档。 <span id=\"more\"></span> # 关于服务器 我购买的是阿里云的服务器，今年618期间很便宜，最低配置的60块不到就能买上一年。 操作系统我选择了CentOS 8。原因无他，一直以来用的都是Cent OS，且更高的版本号意味着更好的兼容性与稳定性（测试版除外）。 # 关于环境 以下这些操作，建议在本地电脑完成之后，再使用git同步到服务器端。</p>\n<p>非常不建议用户直接使用root账户来进行以下操作。</p>\n<p>非常建议用户创建一个有sudo权限的账户来进行以下操作。 ## python版本 在Cent OS下，建议直接使用yum命令进行下载。yum命令提供了4个版本的python可供下载:</p>\n<ul>\n<li>python2</li>\n<li>python36</li>\n<li>python38</li>\n<li>python39</li>\n</ul>\n<p>例如下载python 3.9时，直接使用命令 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python39</span><br></pre></td></tr></table></figure> 如果提示权限不够记得加上sudo。</p>\n<p>版本可以根据个人使用习惯来进行选择。我个人一直使用的是python 3.8。</p>\n<p>不推荐使用python2，尽管我看到的很多教程都说python 2与Flask和uWSGI相性更佳，但实际使用下来python3也完全没有出现不兼容的问题。</p>\n<h2 id=\"虚拟环境\">虚拟环境</h2>\n<p>为什么要创建虚拟环境？</p>\n<p>虚拟环境的好处在于安装在其中的插件不会影响到你电脑上的本地配置，也独立于其他的虚拟环境。例如当你的一个项目需要Fabric 1.x，而另一个需要Fabric 2.x的时候，如果你使用了虚拟环境，他们互相不会冲突。但如果不使用虚拟环境，你就需要删掉其中一个版本，再安装另一个版本以避免兼容性问题。</p>\n<p>在python 3中，官方文档建议用户使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv (/path to new virtual environment)</span><br></pre></td></tr></table></figure> 命令来创建虚拟环境。</p>\n<p>例如，你可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv venv</span><br></pre></td></tr></table></figure> 来在当前目录下创建一个目录名为venv的虚拟环境。</p>\n<p>创建完成之后，进入到venv文件，使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ./bin/activate</span><br></pre></td></tr></table></figure> 来激活虚拟环境，处在虚拟环境中时，直接输入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure> 来退出虚拟环境。</p>\n<h2 id=\"依赖包\">依赖包</h2>\n<p>这一步需要等你的Flask项目已经万事俱备，只差部署到服务器端的时候再操作，写在这里只是因为与上边的一块内容有些许关联。</p>\n<p>用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure> 命令可以提取当前所有依赖包，并将其写入requirements.txt文件中，这样在服务器端安装时，可以直接使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requiremtns.txt</span><br></pre></td></tr></table></figure> 安装你在本地电脑上的所有依赖包。 需要注意的是如果提示权限不够，pip的官方文档并不提倡使用sudo，而是建议用户使用“ --user ”参数。这个参数的含义是将包安装到用户主目录，而非python的安装目录下。 # 安装nginx 由于nginx在近几年变得越来越流行，现在yum的库里已经包含了nginx，不再需要我们手动添加了。</p>\n<p>直接使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure> 来安装。</p>\n<p>安装完可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure> 命令来检查是否安装成功。</p>\n<p>以下是几个常用命令： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx //开机启动nginx</span><br><span class=\"line\">sudo systemctl start nginx //启动nginx</span><br><span class=\"line\">sudo systemctl stop nginx //关闭nginx</span><br><span class=\"line\">sudo systemctl restart nginx //重新加载nginx</span><br><span class=\"line\">sudo systemctl status nginx //查看nginx状态</span><br></pre></td></tr></table></figure> 关于nginx的配置问题会在最后讲解。</p>\n<h1 id=\"安装uwsgi\">安装uwsgi</h1>\n<p>关于uwsgi的作用以及他与nginx的区别，想要了解的可以参考这篇文章： <a href=\"https://www.dazhuanlan.com/2019/10/11/5d9f74310baf0/\">nginx和uwsgi的区别和作用</a>. 文章讲的很好，也很详细，我就不在此赘述了。</p>\n<p>安装uwsgi可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure> 命令直接进行安装。</p>\n<p>安装完之后可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --version</span><br></pre></td></tr></table></figure> 命令来确认是否安装成功。</p>\n<p>uwsgi的配置问题也会在最后讲解。</p>\n<h1 id=\"部署到服务器\">部署到服务器</h1>\n<p>连接到你的服务器，进入到你想要放置你项目位置的文件夹。</p>\n<p>如果对此犹豫不决，我建议你就放在你当前用户的主目录下。</p>\n<p>按个人喜好，使用git或者scp或者ftp传输工具将项目上传到服务器上。</p>\n<p>如果你的服务器上没有跟你本地版本相同的python，你需要在服务器端再次重复上述安装python的步骤。</p>\n<p>在确保python版本一致之后，你可以使用上边的 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure> 来安装所有依赖包了。</p>\n<h2 id=\"uwsgi初始化文件\">uwsgi初始化文件</h2>\n<p>在你项目的根目录创建一个.ini文件，名称最好能体现他的作用，例如uwsgi.ini或项目名.ini。 在里边写上如下内容： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\">socket=127.0.0.1:5000 //你可以选择不同的端口，下边还会用到。</span><br><span class=\"line\"></span><br><span class=\"line\">chdir=/home/wst/wms //你的项目的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">wsgi-file=app.py //你的启动文件，注意这里是相对项目根目录的地址。</span><br><span class=\"line\"></span><br><span class=\"line\">callable=app //启动文件实例的名称</span><br><span class=\"line\"></span><br><span class=\"line\">processes=4 </span><br><span class=\"line\"></span><br><span class=\"line\">threads=2</span><br><span class=\"line\"></span><br><span class=\"line\">master=true</span><br><span class=\"line\"></span><br><span class=\"line\">stats=127.0.0.1:9191</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> 以上标有注释的请根据实际情况修改，无注释的，也没有需求理解这些参数的可以照抄。</p>\n<p>修改完后记得删掉我的注释。</p>\n<h2 id=\"nginx配置\">nginx配置</h2>\n<p>nginx的配置文件\" nginx.conf \"通常存在于\" /etc/nginx \"目录下，如果你找不到，可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> 命令来查看他的位置。</p>\n<p>使用文本编辑器打开它 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure> 会看到类似下面的代码 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For more information on configuration, see:</span><br><span class=\"line\">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class=\"line\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class=\"line\"></span><br><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Settings for a TLS enabled server.</span><br><span class=\"line\">#</span><br><span class=\"line\">#    server &#123;</span><br><span class=\"line\">#        listen       443 ssl http2 default_server;</span><br><span class=\"line\">#        listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">#        server_name  _;</span><br><span class=\"line\">#        root         /usr/share/nginx/html;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">#        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">#        ssl_session_timeout  10m;</span><br><span class=\"line\">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class=\"line\">#        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        # Load configuration files for the default server block.</span><br><span class=\"line\">#        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        location / &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 404 /404.html;</span><br><span class=\"line\">#            location = /40x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">#            location = /50x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 将\" server \"内的\" server_name \"改成你的域名或者公网地址；</p>\n<p>在\" root \"下增加两行，分别为\"access_log\"和\"error_log\"；</p>\n<p>在\" location / \"内启用\" uwsgi_params \"。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  xxx.xxx.xxx.xxx;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\">    access_log  /home/wst/wms/logs/access.log;</span><br><span class=\"line\">    error_log  /home/wst/wms/logs/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">   \t\tinclude     uwsgi_params;</span><br><span class=\"line\">    \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致</span><br><span class=\"line\">     uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址</span><br><span class=\"line\">     uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址</span><br><span class=\"line\">     uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> 命令检查是否有语法错误。</p>\n<p>如果没有报错，输入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure> 在此之后，访问你的公网地址，你应该就能看到你的网页了。</p>\n<p>下一步就是在服务器端启用监管以重启挂掉的程序，和使用fabric或jenkins来进行持续集成，避免每次在本地更新代码后，还需要进行冗余的操作来将其同步到云端。这部分内容我会在之后完成相应的工作后也写一篇博客记录。</p>\n","site":{"data":{}},"length":5472,"excerpt":"<h1 id=\"写在前面\">写在前面</h1>\n<p>写这篇文章是因为我在自己部署项目的时候，遇到了很多仅靠别人的博客和回答解决不了的问题。于是在自己解决了之后，就希望能够详细的记录下来，既能方便其他可能跟我一样基础比较差的人，也预防将来的自己忘掉了，又得一遍遍的翻枯燥的官方文档。","more":"# 关于服务器 我购买的是阿里云的服务器，今年618期间很便宜，最低配置的60块不到就能买上一年。 操作系统我选择了CentOS 8。原因无他，一直以来用的都是Cent OS，且更高的版本号意味着更好的兼容性与稳定性（测试版除外）。 # 关于环境 以下这些操作，建议在本地电脑完成之后，再使用git同步到服务器端。</p>\n<p>非常不建议用户直接使用root账户来进行以下操作。</p>\n<p>非常建议用户创建一个有sudo权限的账户来进行以下操作。 ## python版本 在Cent OS下，建议直接使用yum命令进行下载。yum命令提供了4个版本的python可供下载:</p>\n<ul>\n<li>python2</li>\n<li>python36</li>\n<li>python38</li>\n<li>python39</li>\n</ul>\n<p>例如下载python 3.9时，直接使用命令 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python39</span><br></pre></td></tr></table></figure> 如果提示权限不够记得加上sudo。</p>\n<p>版本可以根据个人使用习惯来进行选择。我个人一直使用的是python 3.8。</p>\n<p>不推荐使用python2，尽管我看到的很多教程都说python 2与Flask和uWSGI相性更佳，但实际使用下来python3也完全没有出现不兼容的问题。</p>\n<h2 id=\"虚拟环境\">虚拟环境</h2>\n<p>为什么要创建虚拟环境？</p>\n<p>虚拟环境的好处在于安装在其中的插件不会影响到你电脑上的本地配置，也独立于其他的虚拟环境。例如当你的一个项目需要Fabric 1.x，而另一个需要Fabric 2.x的时候，如果你使用了虚拟环境，他们互相不会冲突。但如果不使用虚拟环境，你就需要删掉其中一个版本，再安装另一个版本以避免兼容性问题。</p>\n<p>在python 3中，官方文档建议用户使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv (/path to new virtual environment)</span><br></pre></td></tr></table></figure> 命令来创建虚拟环境。</p>\n<p>例如，你可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv venv</span><br></pre></td></tr></table></figure> 来在当前目录下创建一个目录名为venv的虚拟环境。</p>\n<p>创建完成之后，进入到venv文件，使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ./bin/activate</span><br></pre></td></tr></table></figure> 来激活虚拟环境，处在虚拟环境中时，直接输入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure> 来退出虚拟环境。</p>\n<h2 id=\"依赖包\">依赖包</h2>\n<p>这一步需要等你的Flask项目已经万事俱备，只差部署到服务器端的时候再操作，写在这里只是因为与上边的一块内容有些许关联。</p>\n<p>用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure> 命令可以提取当前所有依赖包，并将其写入requirements.txt文件中，这样在服务器端安装时，可以直接使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requiremtns.txt</span><br></pre></td></tr></table></figure> 安装你在本地电脑上的所有依赖包。 需要注意的是如果提示权限不够，pip的官方文档并不提倡使用sudo，而是建议用户使用“ --user ”参数。这个参数的含义是将包安装到用户主目录，而非python的安装目录下。 # 安装nginx 由于nginx在近几年变得越来越流行，现在yum的库里已经包含了nginx，不再需要我们手动添加了。</p>\n<p>直接使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure> 来安装。</p>\n<p>安装完可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure> 命令来检查是否安装成功。</p>\n<p>以下是几个常用命令： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx //开机启动nginx</span><br><span class=\"line\">sudo systemctl start nginx //启动nginx</span><br><span class=\"line\">sudo systemctl stop nginx //关闭nginx</span><br><span class=\"line\">sudo systemctl restart nginx //重新加载nginx</span><br><span class=\"line\">sudo systemctl status nginx //查看nginx状态</span><br></pre></td></tr></table></figure> 关于nginx的配置问题会在最后讲解。</p>\n<h1 id=\"安装uwsgi\">安装uwsgi</h1>\n<p>关于uwsgi的作用以及他与nginx的区别，想要了解的可以参考这篇文章： <a href=\"https://www.dazhuanlan.com/2019/10/11/5d9f74310baf0/\">nginx和uwsgi的区别和作用</a>. 文章讲的很好，也很详细，我就不在此赘述了。</p>\n<p>安装uwsgi可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure> 命令直接进行安装。</p>\n<p>安装完之后可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --version</span><br></pre></td></tr></table></figure> 命令来确认是否安装成功。</p>\n<p>uwsgi的配置问题也会在最后讲解。</p>\n<h1 id=\"部署到服务器\">部署到服务器</h1>\n<p>连接到你的服务器，进入到你想要放置你项目位置的文件夹。</p>\n<p>如果对此犹豫不决，我建议你就放在你当前用户的主目录下。</p>\n<p>按个人喜好，使用git或者scp或者ftp传输工具将项目上传到服务器上。</p>\n<p>如果你的服务器上没有跟你本地版本相同的python，你需要在服务器端再次重复上述安装python的步骤。</p>\n<p>在确保python版本一致之后，你可以使用上边的 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure> 来安装所有依赖包了。</p>\n<h2 id=\"uwsgi初始化文件\">uwsgi初始化文件</h2>\n<p>在你项目的根目录创建一个.ini文件，名称最好能体现他的作用，例如uwsgi.ini或项目名.ini。 在里边写上如下内容： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\">socket=127.0.0.1:5000 //你可以选择不同的端口，下边还会用到。</span><br><span class=\"line\"></span><br><span class=\"line\">chdir=/home/wst/wms //你的项目的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">wsgi-file=app.py //你的启动文件，注意这里是相对项目根目录的地址。</span><br><span class=\"line\"></span><br><span class=\"line\">callable=app //启动文件实例的名称</span><br><span class=\"line\"></span><br><span class=\"line\">processes=4 </span><br><span class=\"line\"></span><br><span class=\"line\">threads=2</span><br><span class=\"line\"></span><br><span class=\"line\">master=true</span><br><span class=\"line\"></span><br><span class=\"line\">stats=127.0.0.1:9191</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> 以上标有注释的请根据实际情况修改，无注释的，也没有需求理解这些参数的可以照抄。</p>\n<p>修改完后记得删掉我的注释。</p>\n<h2 id=\"nginx配置\">nginx配置</h2>\n<p>nginx的配置文件\" nginx.conf \"通常存在于\" /etc/nginx \"目录下，如果你找不到，可以使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> 命令来查看他的位置。</p>\n<p>使用文本编辑器打开它 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure> 会看到类似下面的代码 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For more information on configuration, see:</span><br><span class=\"line\">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class=\"line\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class=\"line\"></span><br><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Settings for a TLS enabled server.</span><br><span class=\"line\">#</span><br><span class=\"line\">#    server &#123;</span><br><span class=\"line\">#        listen       443 ssl http2 default_server;</span><br><span class=\"line\">#        listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">#        server_name  _;</span><br><span class=\"line\">#        root         /usr/share/nginx/html;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">#        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">#        ssl_session_timeout  10m;</span><br><span class=\"line\">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class=\"line\">#        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        # Load configuration files for the default server block.</span><br><span class=\"line\">#        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        location / &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 404 /404.html;</span><br><span class=\"line\">#            location = /40x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">#            location = /50x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 将\" server \"内的\" server_name \"改成你的域名或者公网地址；</p>\n<p>在\" root \"下增加两行，分别为\"access_log\"和\"error_log\"；</p>\n<p>在\" location / \"内启用\" uwsgi_params \"。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  xxx.xxx.xxx.xxx;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\">    access_log  /home/wst/wms/logs/access.log;</span><br><span class=\"line\">    error_log  /home/wst/wms/logs/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">   \t\tinclude     uwsgi_params;</span><br><span class=\"line\">    \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致</span><br><span class=\"line\">     uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址</span><br><span class=\"line\">     uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址</span><br><span class=\"line\">     uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后使用 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> 命令检查是否有语法错误。</p>\n<p>如果没有报错，输入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure> 在此之后，访问你的公网地址，你应该就能看到你的网页了。</p>\n<p>下一步就是在服务器端启用监管以重启挂掉的程序，和使用fabric或jenkins来进行持续集成，避免每次在本地更新代码后，还需要进行冗余的操作来将其同步到云端。这部分内容我会在之后完成相应的工作后也写一篇博客记录。</p>"},{"title":"Latex技巧总结(更新中)","date":"2022-01-22T02:15:59.000Z","mathjax":true,"_content":"\n# 前言\n这篇文章主要记录一些用LaTeX写作时常用的环境以及数学公式，一来方便自己需要时查阅，二来也给有需要的人提供一点便利。\n\n**注意**，这篇文章假设你了解LaTeX的基本知识，所以没有LaTeX的详细教学。\n<!--more-->\n\n# 文本类\n\n## Description环境\n\n**大象**&nbsp;&nbsp;&nbsp;&nbsp;一种动物。</br>\n\n```\n\\begin{description}\n\t\\item{大象} 一种动物。\n\\end{description}\n```\n\n---\n\n## 列表\n\n### 有序列表\n\n1. 第一项\n2. 第二项\n3. 第三项\n\n```\n\\begin{enumerate}\n\t\\item[] 第一项\n\t\\item[] 第二项\n\t\\item[] 第三项\n\\end{enumerate}\n```\n\n### 无序列表\n形如:</br>\n\n* subsubsub\n* supsupsup\n* puspuspus\n\n```\n\\begin{itemize}\n\t\\item[] subsubsub\n\t\\item[] supsupsup\n\t\\item[] puspuspus\n\\end{itemize}\n```\n&nbsp;&nbsp;&nbsp;&nbsp;[]内可指定自定义行符。\n\n---\n\n# 数学类\n\n## Arithmetic Operations\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\sqrt[5]{x}` | $\\sqrt[5]{x}$ |\n| `\\lvert x \\rvert` | $\\lvert x \\rvert$ |\n| `+` | $+$ |\n| `-` | $-$ |\n| `\\times` | $\\times$ |\n| `\\div` | $\\div$ |\n\n## 角标\n\n| Code | 效果 |\n| :----: | :----: |\n| `_aX` | $_aX$ |\n| `^bX` | $^bX$ |\n| `X^c` | $X^c$ |\n| `X_d` | $X_d$ |\n\n## 划线\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\overline{abcddd}` | $\\overline{abcddd}$ |\n| `\\underline{abcddd}` | $\\underline{abcddd}$ |\n\n\n## 微积分\n\n### 极限\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\lim_{n \\to \\infty}n` | $\\lim_{n \\to \\infty}n$ |\n\n### 微分\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\mathrm{d}x` | $\\mathrm{d}x$ |\n| `\\frac{\\mathrm{d}y}{\\mathrm{d}x}` | $\\frac{\\mathrm{d}y}{\\mathrm{d}x}$ |\n| `\\partial{x}` | $\\partial{x}$ |\n| `f‘(x)` | $f’(x)$ |\n\n### 级数\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\sum_{k=1}^N k^2` | $\\sum_{k=0}^N k$ |\n\n\n### 积分\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\int_{-\\infty}^{\\infty}` | $\\int_{-\\infty}^{\\infty}$ |\n| `\\iint_{-\\infty}^{\\infty}` | $\\iint_{-\\infty}^{\\infty}$ |\n| `\\iiint_{-\\infty}^{\\infty}` | $\\iiint_{-\\infty}^{\\infty}$ |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_drafts/Latex技巧总结.md","raw":"---\ntitle: Latex技巧总结(更新中)\ndate: 2022-01-21 21:15:59\ncategories: Dictionaries\ntags:\n- LaTeX\nmathjax: true\n---\n\n# 前言\n这篇文章主要记录一些用LaTeX写作时常用的环境以及数学公式，一来方便自己需要时查阅，二来也给有需要的人提供一点便利。\n\n**注意**，这篇文章假设你了解LaTeX的基本知识，所以没有LaTeX的详细教学。\n<!--more-->\n\n# 文本类\n\n## Description环境\n\n**大象**&nbsp;&nbsp;&nbsp;&nbsp;一种动物。</br>\n\n```\n\\begin{description}\n\t\\item{大象} 一种动物。\n\\end{description}\n```\n\n---\n\n## 列表\n\n### 有序列表\n\n1. 第一项\n2. 第二项\n3. 第三项\n\n```\n\\begin{enumerate}\n\t\\item[] 第一项\n\t\\item[] 第二项\n\t\\item[] 第三项\n\\end{enumerate}\n```\n\n### 无序列表\n形如:</br>\n\n* subsubsub\n* supsupsup\n* puspuspus\n\n```\n\\begin{itemize}\n\t\\item[] subsubsub\n\t\\item[] supsupsup\n\t\\item[] puspuspus\n\\end{itemize}\n```\n&nbsp;&nbsp;&nbsp;&nbsp;[]内可指定自定义行符。\n\n---\n\n# 数学类\n\n## Arithmetic Operations\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\sqrt[5]{x}` | $\\sqrt[5]{x}$ |\n| `\\lvert x \\rvert` | $\\lvert x \\rvert$ |\n| `+` | $+$ |\n| `-` | $-$ |\n| `\\times` | $\\times$ |\n| `\\div` | $\\div$ |\n\n## 角标\n\n| Code | 效果 |\n| :----: | :----: |\n| `_aX` | $_aX$ |\n| `^bX` | $^bX$ |\n| `X^c` | $X^c$ |\n| `X_d` | $X_d$ |\n\n## 划线\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\overline{abcddd}` | $\\overline{abcddd}$ |\n| `\\underline{abcddd}` | $\\underline{abcddd}$ |\n\n\n## 微积分\n\n### 极限\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\lim_{n \\to \\infty}n` | $\\lim_{n \\to \\infty}n$ |\n\n### 微分\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\mathrm{d}x` | $\\mathrm{d}x$ |\n| `\\frac{\\mathrm{d}y}{\\mathrm{d}x}` | $\\frac{\\mathrm{d}y}{\\mathrm{d}x}$ |\n| `\\partial{x}` | $\\partial{x}$ |\n| `f‘(x)` | $f’(x)$ |\n\n### 级数\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\sum_{k=1}^N k^2` | $\\sum_{k=0}^N k$ |\n\n\n### 积分\n\n| Code | 效果 |\n| :----: | :----: |\n| `\\int_{-\\infty}^{\\infty}` | $\\int_{-\\infty}^{\\infty}$ |\n| `\\iint_{-\\infty}^{\\infty}` | $\\iint_{-\\infty}^{\\infty}$ |\n| `\\iiint_{-\\infty}^{\\infty}` | $\\iiint_{-\\infty}^{\\infty}$ |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Latex技巧总结","published":0,"updated":"2022-01-29T18:25:04.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87ud6jd0006vnud3mp22bfo","content":"<h1 id=\"前言\">前言</h1>\n<p>这篇文章主要记录一些用LaTeX写作时常用的环境以及数学公式，一来方便自己需要时查阅，二来也给有需要的人提供一点便利。</p>\n<p><strong>注意</strong>，这篇文章假设你了解LaTeX的基本知识，所以没有LaTeX的详细教学。 <span id=\"more\"></span></p>\n<h1 id=\"文本类\">文本类</h1>\n<h2 id=\"description环境\">Description环境</h2>\n<p><strong>大象</strong>    一种动物。</br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;description&#125;</span><br><span class=\"line\">\t\\item&#123;大象&#125; 一种动物。</span><br><span class=\"line\">\\end&#123;description&#125;</span><br></pre></td></tr></table></figure>\n<hr />\n<h2 id=\"列表\">列表</h2>\n<h3 id=\"有序列表\">有序列表</h3>\n<ol type=\"1\">\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;enumerate&#125;</span><br><span class=\"line\">\t\\item[] 第一项</span><br><span class=\"line\">\t\\item[] 第二项</span><br><span class=\"line\">\t\\item[] 第三项</span><br><span class=\"line\">\\end&#123;enumerate&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"无序列表\">无序列表</h3>\n<p>形如:</br></p>\n<ul>\n<li>subsubsub</li>\n<li>supsupsup</li>\n<li>puspuspus</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;itemize&#125;</span><br><span class=\"line\">\t\\item[] subsubsub</span><br><span class=\"line\">\t\\item[] supsupsup</span><br><span class=\"line\">\t\\item[] puspuspus</span><br><span class=\"line\">\\end&#123;itemize&#125;</span><br></pre></td></tr></table></figure>\n<p>    []内可指定自定义行符。</p>\n<hr />\n<h1 id=\"数学类\">数学类</h1>\n<h2 id=\"arithmetic-operations\">Arithmetic Operations</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\sqrt[5]&#123;x&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\sqrt[5]{x}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\lvert x \\rvert</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lvert x \\rvert\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>+</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(+\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>-</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(-\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\times</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\times\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\div</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\div\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"角标\">角标</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>_aX</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(_aX\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>^bX</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(^bX\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>X^c</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(X^c\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>X_d</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(X_d\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"划线\">划线</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\overline&#123;abcddd&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\overline{abcddd}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\underline&#123;abcddd&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\underline{abcddd}\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"微积分\">微积分</h2>\n<h3 id=\"极限\">极限</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\lim_&#123;n \\to \\infty&#125;n</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lim_{n \\to \\infty}n\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"微分\">微分</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\mathrm&#123;d&#125;x</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\mathrm{d}x\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\frac&#123;\\mathrm&#123;d&#125;y&#125;&#123;\\mathrm&#123;d&#125;x&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\frac{\\mathrm{d}y}{\\mathrm{d}x}\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\partial&#123;x&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\partial{x}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>f‘(x)</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(f’(x)\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"级数\">级数</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\sum_&#123;k=1&#125;^N k^2</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\sum_{k=0}^N k\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"积分\">积分</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\int_&#123;-\\infty&#125;^&#123;\\infty&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\int_{-\\infty}^{\\infty}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\iint_&#123;-\\infty&#125;^&#123;\\infty&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\iint_{-\\infty}^{\\infty}\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\iiint_&#123;-\\infty&#125;^&#123;\\infty&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\iiint_{-\\infty}^{\\infty}\\)</span></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"length":1278,"excerpt":"<h1 id=\"前言\">前言</h1>\n<p>这篇文章主要记录一些用LaTeX写作时常用的环境以及数学公式，一来方便自己需要时查阅，二来也给有需要的人提供一点便利。</p>\n<p><strong>注意</strong>，这篇文章假设你了解LaTeX的基本知识，所以没有LaTeX的详细教学。","more":"</p>\n<h1 id=\"文本类\">文本类</h1>\n<h2 id=\"description环境\">Description环境</h2>\n<p><strong>大象</strong>    一种动物。</br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;description&#125;</span><br><span class=\"line\">\t\\item&#123;大象&#125; 一种动物。</span><br><span class=\"line\">\\end&#123;description&#125;</span><br></pre></td></tr></table></figure>\n<hr />\n<h2 id=\"列表\">列表</h2>\n<h3 id=\"有序列表\">有序列表</h3>\n<ol type=\"1\">\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;enumerate&#125;</span><br><span class=\"line\">\t\\item[] 第一项</span><br><span class=\"line\">\t\\item[] 第二项</span><br><span class=\"line\">\t\\item[] 第三项</span><br><span class=\"line\">\\end&#123;enumerate&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"无序列表\">无序列表</h3>\n<p>形如:</br></p>\n<ul>\n<li>subsubsub</li>\n<li>supsupsup</li>\n<li>puspuspus</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\begin&#123;itemize&#125;</span><br><span class=\"line\">\t\\item[] subsubsub</span><br><span class=\"line\">\t\\item[] supsupsup</span><br><span class=\"line\">\t\\item[] puspuspus</span><br><span class=\"line\">\\end&#123;itemize&#125;</span><br></pre></td></tr></table></figure>\n<p>    []内可指定自定义行符。</p>\n<hr />\n<h1 id=\"数学类\">数学类</h1>\n<h2 id=\"arithmetic-operations\">Arithmetic Operations</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\sqrt[5]&#123;x&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\sqrt[5]{x}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\lvert x \\rvert</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lvert x \\rvert\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>+</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(+\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>-</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(-\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\times</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\times\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\div</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\div\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"角标\">角标</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>_aX</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(_aX\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>^bX</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(^bX\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>X^c</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(X^c\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>X_d</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(X_d\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"划线\">划线</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\overline&#123;abcddd&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\overline{abcddd}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\underline&#123;abcddd&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\underline{abcddd}\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"微积分\">微积分</h2>\n<h3 id=\"极限\">极限</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\lim_&#123;n \\to \\infty&#125;n</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lim_{n \\to \\infty}n\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"微分\">微分</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\mathrm&#123;d&#125;x</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\mathrm{d}x\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\frac&#123;\\mathrm&#123;d&#125;y&#125;&#123;\\mathrm&#123;d&#125;x&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\frac{\\mathrm{d}y}{\\mathrm{d}x}\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\partial&#123;x&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\partial{x}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>f‘(x)</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(f’(x)\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"级数\">级数</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\sum_&#123;k=1&#125;^N k^2</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\sum_{k=0}^N k\\)</span></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"积分\">积分</h3>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Code</th>\n<th style=\"text-align: center;\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\int_&#123;-\\infty&#125;^&#123;\\infty&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\int_{-\\infty}^{\\infty}\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><code>\\iint_&#123;-\\infty&#125;^&#123;\\infty&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\iint_{-\\infty}^{\\infty}\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><code>\\iiint_&#123;-\\infty&#125;^&#123;\\infty&#125;</code></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\iiint_{-\\infty}^{\\infty}\\)</span></td>\n</tr>\n</tbody>\n</table>"},{"title":"Pyserial的使用心得","date":"2021-08-17T15:55:32.000Z","_content":"\n# 关于Pyserial\nPyserial库封装了访问串口的方法。它为在Windows，OSX，Linux，BSD和IronPython上运行的Python提供后端。```serial```对象会自动选择合适的后端。\nThis module encapsulates the access for the serial port. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend.\n<!--more-->\n\n# Pyserial库的安装\n将python版本更新到2.7及以上，或3.4及以上，然后直接使用pip安装：\n```bash\npip install pyserial\n```\n\n# Serial对象\n导入pyserial包后使用serial.Serial创建。\n此处因为业务需要，需要同时在windows和linux或macos下访问此应用。\n在windows和linux中，端口名称不相同。\n在windows下，端口名形如【COMx】（x为整数）；\n在linux下，端口名形如【/dev/xxxxx】（x为具体端口名）。\n因此还引入了platform来判断系统以获取不同系统下的端口。\n```python3\nimport serial\n\n\tdef create_connection(self, port):\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200, #波特率\n                                     bytesize=8, #字节大小\n                                     stopbits=1) #停止位\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n```\n此处应根据实际业务需求设置【校验位】，【超时时间】等属性。\n## 常用属性\n以下为Serial对象所有的属性：\n```python3\nport: str #端口名\nbaudrate: int #波特率\nbytesize #可能的值：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS\nparity #可能的值：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE\nstopbits #可能的值：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO\ntimeout: float #超时时长\nxonxoff: bool #软件流控制的开关\nrtscts: bool #硬件(RTS/CTS)流控制的开关\ndsrdtr: bool #硬件(DSR/DTR)流控制的开关\nwrite_timeout: float #输出的超时时间\ninter_byte_timeout: float #字符间隔超时时长，默认设置为None以禁用\nin_waiting: int #返回输入缓冲区（待接收）中的字符数量\nout_waiting: int #返回输出缓冲区（待发送）中的字符数量\n\n```\n- 其中【port】【baudrate】【bytesize】【parity】【stopbits】【in_waiting】很常用。\n- 【timeout】的设置会影响read()方法的行为：\n  * 设置为None时，read()会一直从缓冲区中读取数据，直到指定的字符数量已被读取。\n  * 设置为0时，read()会立即返回读到的从0到指定数量的字符。\n  * 设置为x（x为整数）时，read()会在达到x秒时返回读到的所有字符，或在此之前返回指定数\t\t量的字符。\n## 常用方法\n```python3\n\ndef serial.tool.list_ports()\n\"\"\"返回所有检测到的串口\n\"\"\"\n\nserial.Serial.open()\n\"\"\"打开串口\n\"\"\"\n\nserial.Serial.close()\n\"\"\"关闭串口\n\"\"\"\n\nserial.Serial.read(size=1)\n\"\"\"从串口中读取最多【size】个的字符\n\"\"\"\n\nserial.Serial.write(data)\n\"\"\"向串口发送数据【data】,【data】的类型为bytes, bytearray或str。\n\"\"\"\n\nserial.Serial.flush()\n\"\"\"等待所有数据发送完毕\n\"\"\"\n```\n\n# 例子\n封装案例：\n```python3\nimport serial\n\nimport serial.tools.list_ports\n\nimport platform\n\nfrom time import sleep\n\n\nclass PortManager(object):\n\t\"\"\"操作串口的类\n\n    Attributes:\n        _system: str - 当前应用所在环境的系统类型\n        ser: serial.Serial - 串口链接的对象\n        _serial_port: str - 串口名称\n    \"\"\"\n\n    _system = platform.system()\n    ser: serial.Serial\n    _serial_port: str\n\n    def set_port(self, port):\n    \t\"\"\"_serial_port的setter\"\"\"\n        self._serial_port = port\n\n    def get_port(self):\n    \t\"\"\"_serial_port的getter\"\"\"\n        return self._serial_port\n\n    def list_ports(self):\n    \t\"\"\"获取并返回所有的串口\"\"\"\n        list_p = list(serial.tools.list_ports.comports())\n        list_ports_name = []\n        if self._system.lower() == \"darwin\":\n            list_ports_name = [str(i.name) for i in list_p]\n        elif self._system.lower() == \"windows\":\n            list_ports_name = [str(i.device) for i in list_p]\n        return list_ports_name\n\n    def create_connection(self, port):\n    \t\"\"\"创建串口链接\"\"\"\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n\n    def send_data(self, value):\n    \t\"\"\"向串口发送数据\"\"\"\n        write_data = bytearray.fromhex(value)\n        try:\n            sleep(0.1)\n            if self.ser.out_waiting:\n                self.ser.reset_output_buffer()\n            if self.ser.write(write_data):\n                self.ser.flush()\n            else:\n                if self.ser.write(write_data):\n                    self.ser.flush()\n            self.ser.reset_output_buffer()\n            return True\n        except Exception as e:\n            print(e)\n            self.ser.reset_output_buffer()\n            return False\n\n    def read_data(self):\n    \t\"\"\"从串口读取数据\"\"\"\n        try:\n            sleep(0.1)\n            if self.ser.in_waiting:\n                bs = self.ser.read(self.ser.in_waiting).hex()\n                self.ser.reset_input_buffer()\n                res = ''\n                for i in range(len(bs)):\n                    res += bs[i]\n                    if i % 2 == 1:\n                        res += ' '\n                res = res.rstrip(' ')\n                return res\n            else:\n                sleep(0.1)\n                if self.ser.in_waiting:\n                    bs = self.ser.read(self.ser.in_waiting).hex()\n                    self.ser.reset_input_buffer()\n                    res = ''\n                    for i in range(len(bs)):\n                        res += bs[i]\n                        if i % 2 == 1:\n                            res += ' '\n                    res = res.rstrip(' ')\n                    return res\n                else:\n                    self.ser.reset_input_buffer()\n                    return \"\"\n        except Exception as e:\n            print(e)\n            self.ser.reset_input_buffer()\n            return None\n\n    def close(self, *ser):\n    \t\"\"\"关闭串口\"\"\"\n        if ser:\n            ser[0].close()\n        else:\n            self.ser.close()\n```\n# 小结\n这是用bootstrap构建的一个web app，主要用途是配置测试公司客制化的继电器板卡。\n此app就是利用pyserial与串口通信。\n\n配置组模式：\n![配置组模式](https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\n板卡控制面板：\n![板卡控制面板](https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n板卡配置面板：\n![板卡配置面板](https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\n连接错误处理：\n![错误处理](https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\n多板卡级联时的板卡切换：\n![多板卡级联的切换板卡](https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n","source":"_drafts/Pyserial库使用心得.md","raw":"---\ntitle: Pyserial的使用心得\ndate: 2021-08-17 11:55:32\ncategories: Programming & Algorithms\ntags:\n- Python\n---\n\n# 关于Pyserial\nPyserial库封装了访问串口的方法。它为在Windows，OSX，Linux，BSD和IronPython上运行的Python提供后端。```serial```对象会自动选择合适的后端。\nThis module encapsulates the access for the serial port. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend.\n<!--more-->\n\n# Pyserial库的安装\n将python版本更新到2.7及以上，或3.4及以上，然后直接使用pip安装：\n```bash\npip install pyserial\n```\n\n# Serial对象\n导入pyserial包后使用serial.Serial创建。\n此处因为业务需要，需要同时在windows和linux或macos下访问此应用。\n在windows和linux中，端口名称不相同。\n在windows下，端口名形如【COMx】（x为整数）；\n在linux下，端口名形如【/dev/xxxxx】（x为具体端口名）。\n因此还引入了platform来判断系统以获取不同系统下的端口。\n```python3\nimport serial\n\n\tdef create_connection(self, port):\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200, #波特率\n                                     bytesize=8, #字节大小\n                                     stopbits=1) #停止位\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n```\n此处应根据实际业务需求设置【校验位】，【超时时间】等属性。\n## 常用属性\n以下为Serial对象所有的属性：\n```python3\nport: str #端口名\nbaudrate: int #波特率\nbytesize #可能的值：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS\nparity #可能的值：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE\nstopbits #可能的值：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO\ntimeout: float #超时时长\nxonxoff: bool #软件流控制的开关\nrtscts: bool #硬件(RTS/CTS)流控制的开关\ndsrdtr: bool #硬件(DSR/DTR)流控制的开关\nwrite_timeout: float #输出的超时时间\ninter_byte_timeout: float #字符间隔超时时长，默认设置为None以禁用\nin_waiting: int #返回输入缓冲区（待接收）中的字符数量\nout_waiting: int #返回输出缓冲区（待发送）中的字符数量\n\n```\n- 其中【port】【baudrate】【bytesize】【parity】【stopbits】【in_waiting】很常用。\n- 【timeout】的设置会影响read()方法的行为：\n  * 设置为None时，read()会一直从缓冲区中读取数据，直到指定的字符数量已被读取。\n  * 设置为0时，read()会立即返回读到的从0到指定数量的字符。\n  * 设置为x（x为整数）时，read()会在达到x秒时返回读到的所有字符，或在此之前返回指定数\t\t量的字符。\n## 常用方法\n```python3\n\ndef serial.tool.list_ports()\n\"\"\"返回所有检测到的串口\n\"\"\"\n\nserial.Serial.open()\n\"\"\"打开串口\n\"\"\"\n\nserial.Serial.close()\n\"\"\"关闭串口\n\"\"\"\n\nserial.Serial.read(size=1)\n\"\"\"从串口中读取最多【size】个的字符\n\"\"\"\n\nserial.Serial.write(data)\n\"\"\"向串口发送数据【data】,【data】的类型为bytes, bytearray或str。\n\"\"\"\n\nserial.Serial.flush()\n\"\"\"等待所有数据发送完毕\n\"\"\"\n```\n\n# 例子\n封装案例：\n```python3\nimport serial\n\nimport serial.tools.list_ports\n\nimport platform\n\nfrom time import sleep\n\n\nclass PortManager(object):\n\t\"\"\"操作串口的类\n\n    Attributes:\n        _system: str - 当前应用所在环境的系统类型\n        ser: serial.Serial - 串口链接的对象\n        _serial_port: str - 串口名称\n    \"\"\"\n\n    _system = platform.system()\n    ser: serial.Serial\n    _serial_port: str\n\n    def set_port(self, port):\n    \t\"\"\"_serial_port的setter\"\"\"\n        self._serial_port = port\n\n    def get_port(self):\n    \t\"\"\"_serial_port的getter\"\"\"\n        return self._serial_port\n\n    def list_ports(self):\n    \t\"\"\"获取并返回所有的串口\"\"\"\n        list_p = list(serial.tools.list_ports.comports())\n        list_ports_name = []\n        if self._system.lower() == \"darwin\":\n            list_ports_name = [str(i.name) for i in list_p]\n        elif self._system.lower() == \"windows\":\n            list_ports_name = [str(i.device) for i in list_p]\n        return list_ports_name\n\n    def create_connection(self, port):\n    \t\"\"\"创建串口链接\"\"\"\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n\n    def send_data(self, value):\n    \t\"\"\"向串口发送数据\"\"\"\n        write_data = bytearray.fromhex(value)\n        try:\n            sleep(0.1)\n            if self.ser.out_waiting:\n                self.ser.reset_output_buffer()\n            if self.ser.write(write_data):\n                self.ser.flush()\n            else:\n                if self.ser.write(write_data):\n                    self.ser.flush()\n            self.ser.reset_output_buffer()\n            return True\n        except Exception as e:\n            print(e)\n            self.ser.reset_output_buffer()\n            return False\n\n    def read_data(self):\n    \t\"\"\"从串口读取数据\"\"\"\n        try:\n            sleep(0.1)\n            if self.ser.in_waiting:\n                bs = self.ser.read(self.ser.in_waiting).hex()\n                self.ser.reset_input_buffer()\n                res = ''\n                for i in range(len(bs)):\n                    res += bs[i]\n                    if i % 2 == 1:\n                        res += ' '\n                res = res.rstrip(' ')\n                return res\n            else:\n                sleep(0.1)\n                if self.ser.in_waiting:\n                    bs = self.ser.read(self.ser.in_waiting).hex()\n                    self.ser.reset_input_buffer()\n                    res = ''\n                    for i in range(len(bs)):\n                        res += bs[i]\n                        if i % 2 == 1:\n                            res += ' '\n                    res = res.rstrip(' ')\n                    return res\n                else:\n                    self.ser.reset_input_buffer()\n                    return \"\"\n        except Exception as e:\n            print(e)\n            self.ser.reset_input_buffer()\n            return None\n\n    def close(self, *ser):\n    \t\"\"\"关闭串口\"\"\"\n        if ser:\n            ser[0].close()\n        else:\n            self.ser.close()\n```\n# 小结\n这是用bootstrap构建的一个web app，主要用途是配置测试公司客制化的继电器板卡。\n此app就是利用pyserial与串口通信。\n\n配置组模式：\n![配置组模式](https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\n板卡控制面板：\n![板卡控制面板](https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n板卡配置面板：\n![板卡配置面板](https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\n连接错误处理：\n![错误处理](https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\n多板卡级联时的板卡切换：\n![多板卡级联的切换板卡](https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n","slug":"Pyserial库使用心得","published":0,"updated":"2022-01-27T16:22:47.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87ud6je0007vnudfe4678vu","content":"<h1 id=\"关于pyserial\">关于Pyserial</h1>\n<p>Pyserial库封装了访问串口的方法。它为在Windows，OSX，Linux，BSD和IronPython上运行的Python提供后端。<code>serial</code>对象会自动选择合适的后端。 This module encapsulates the access for the serial port. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend. <span id=\"more\"></span></p>\n<h1 id=\"pyserial库的安装\">Pyserial库的安装</h1>\n<p>将python版本更新到2.7及以上，或3.4及以上，然后直接使用pip安装： <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyserial</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"serial对象\">Serial对象</h1>\n<p>导入pyserial包后使用serial.Serial创建。 此处因为业务需要，需要同时在windows和linux或macos下访问此应用。 在windows和linux中，端口名称不相同。 在windows下，端口名形如【COMx】（x为整数）； 在linux下，端口名形如【/dev/xxxxx】（x为具体端口名）。 因此还引入了platform来判断系统以获取不同系统下的端口。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef create_connection(self, port):</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200, #波特率</span><br><span class=\"line\">                                     bytesize=8, #字节大小</span><br><span class=\"line\">                                     stopbits=1) #停止位</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br></pre></td></tr></table></figure> 此处应根据实际业务需求设置【校验位】，【超时时间】等属性。 ## 常用属性 以下为Serial对象所有的属性： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: str #端口名</span><br><span class=\"line\">baudrate: int #波特率</span><br><span class=\"line\">bytesize #可能的值：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS</span><br><span class=\"line\">parity #可能的值：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE</span><br><span class=\"line\">stopbits #可能的值：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO</span><br><span class=\"line\">timeout: float #超时时长</span><br><span class=\"line\">xonxoff: bool #软件流控制的开关</span><br><span class=\"line\">rtscts: bool #硬件(RTS/CTS)流控制的开关</span><br><span class=\"line\">dsrdtr: bool #硬件(DSR/DTR)流控制的开关</span><br><span class=\"line\">write_timeout: float #输出的超时时间</span><br><span class=\"line\">inter_byte_timeout: float #字符间隔超时时长，默认设置为None以禁用</span><br><span class=\"line\">in_waiting: int #返回输入缓冲区（待接收）中的字符数量</span><br><span class=\"line\">out_waiting: int #返回输出缓冲区（待发送）中的字符数量</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> - 其中【port】【baudrate】【bytesize】【parity】【stopbits】【in_waiting】很常用。 - 【timeout】的设置会影响read()方法的行为： * 设置为None时，read()会一直从缓冲区中读取数据，直到指定的字符数量已被读取。 * 设置为0时，read()会立即返回读到的从0到指定数量的字符。 * 设置为x（x为整数）时，read()会在达到x秒时返回读到的所有字符，或在此之前返回指定数 量的字符。 ## 常用方法 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def serial.tool.list_ports()</span><br><span class=\"line\">&quot;&quot;&quot;返回所有检测到的串口</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.open()</span><br><span class=\"line\">&quot;&quot;&quot;打开串口</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.close()</span><br><span class=\"line\">&quot;&quot;&quot;关闭串口</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.read(size=1)</span><br><span class=\"line\">&quot;&quot;&quot;从串口中读取最多【size】个的字符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.write(data)</span><br><span class=\"line\">&quot;&quot;&quot;向串口发送数据【data】,【data】的类型为bytes, bytearray或str。</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.flush()</span><br><span class=\"line\">&quot;&quot;&quot;等待所有数据发送完毕</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"例子\">例子</h1>\n<p>封装案例： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">import serial.tools.list_ports</span><br><span class=\"line\"></span><br><span class=\"line\">import platform</span><br><span class=\"line\"></span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PortManager(object):</span><br><span class=\"line\">\t&quot;&quot;&quot;操作串口的类</span><br><span class=\"line\"></span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">        _system: str - 当前应用所在环境的系统类型</span><br><span class=\"line\">        ser: serial.Serial - 串口链接的对象</span><br><span class=\"line\">        _serial_port: str - 串口名称</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    _system = platform.system()</span><br><span class=\"line\">    ser: serial.Serial</span><br><span class=\"line\">    _serial_port: str</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_port(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port的setter&quot;&quot;&quot;</span><br><span class=\"line\">        self._serial_port = port</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_port(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port的getter&quot;&quot;&quot;</span><br><span class=\"line\">        return self._serial_port</span><br><span class=\"line\"></span><br><span class=\"line\">    def list_ports(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;获取并返回所有的串口&quot;&quot;&quot;</span><br><span class=\"line\">        list_p = list(serial.tools.list_ports.comports())</span><br><span class=\"line\">        list_ports_name = []</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.name) for i in list_p]</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.device) for i in list_p]</span><br><span class=\"line\">        return list_ports_name</span><br><span class=\"line\"></span><br><span class=\"line\">    def create_connection(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;创建串口链接&quot;&quot;&quot;</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def send_data(self, value):</span><br><span class=\"line\">    \t&quot;&quot;&quot;向串口发送数据&quot;&quot;&quot;</span><br><span class=\"line\">        write_data = bytearray.fromhex(value)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.out_waiting:</span><br><span class=\"line\">                self.ser.reset_output_buffer()</span><br><span class=\"line\">            if self.ser.write(write_data):</span><br><span class=\"line\">                self.ser.flush()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if self.ser.write(write_data):</span><br><span class=\"line\">                    self.ser.flush()</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def read_data(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;从串口读取数据&quot;&quot;&quot;</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.in_waiting:</span><br><span class=\"line\">                bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                self.ser.reset_input_buffer()</span><br><span class=\"line\">                res = &#x27;&#x27;</span><br><span class=\"line\">                for i in range(len(bs)):</span><br><span class=\"line\">                    res += bs[i]</span><br><span class=\"line\">                    if i % 2 == 1:</span><br><span class=\"line\">                        res += &#x27; &#x27;</span><br><span class=\"line\">                res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                sleep(0.1)</span><br><span class=\"line\">                if self.ser.in_waiting:</span><br><span class=\"line\">                    bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    res = &#x27;&#x27;</span><br><span class=\"line\">                    for i in range(len(bs)):</span><br><span class=\"line\">                        res += bs[i]</span><br><span class=\"line\">                        if i % 2 == 1:</span><br><span class=\"line\">                            res += &#x27; &#x27;</span><br><span class=\"line\">                    res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                    return res</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    return &quot;&quot;</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_input_buffer()</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def close(self, *ser):</span><br><span class=\"line\">    \t&quot;&quot;&quot;关闭串口&quot;&quot;&quot;</span><br><span class=\"line\">        if ser:</span><br><span class=\"line\">            ser[0].close()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.ser.close()</span><br></pre></td></tr></table></figure> # 小结 这是用bootstrap构建的一个web app，主要用途是配置测试公司客制化的继电器板卡。 此app就是利用pyserial与串口通信。</p>\n<p>配置组模式： <img src=\"https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"配置组模式\" /></p>\n<p>板卡控制面板： <img src=\"https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"板卡控制面板\" /></p>\n<p>板卡配置面板： <img src=\"https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"板卡配置面板\" /></p>\n<p>连接错误处理： <img src=\"https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"错误处理\" /></p>\n<p>多板卡级联时的板卡切换： <img src=\"https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"多板卡级联的切换板卡\" /></p>\n","site":{"data":{}},"length":4731,"excerpt":"<h1 id=\"关于pyserial\">关于Pyserial</h1>\n<p>Pyserial库封装了访问串口的方法。它为在Windows，OSX，Linux，BSD和IronPython上运行的Python提供后端。<code>serial</code>对象会自动选择合适的后端。 This module encapsulates the access for the serial port. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend.","more":"</p>\n<h1 id=\"pyserial库的安装\">Pyserial库的安装</h1>\n<p>将python版本更新到2.7及以上，或3.4及以上，然后直接使用pip安装： <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyserial</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"serial对象\">Serial对象</h1>\n<p>导入pyserial包后使用serial.Serial创建。 此处因为业务需要，需要同时在windows和linux或macos下访问此应用。 在windows和linux中，端口名称不相同。 在windows下，端口名形如【COMx】（x为整数）； 在linux下，端口名形如【/dev/xxxxx】（x为具体端口名）。 因此还引入了platform来判断系统以获取不同系统下的端口。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef create_connection(self, port):</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200, #波特率</span><br><span class=\"line\">                                     bytesize=8, #字节大小</span><br><span class=\"line\">                                     stopbits=1) #停止位</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br></pre></td></tr></table></figure> 此处应根据实际业务需求设置【校验位】，【超时时间】等属性。 ## 常用属性 以下为Serial对象所有的属性： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: str #端口名</span><br><span class=\"line\">baudrate: int #波特率</span><br><span class=\"line\">bytesize #可能的值：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS</span><br><span class=\"line\">parity #可能的值：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE</span><br><span class=\"line\">stopbits #可能的值：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO</span><br><span class=\"line\">timeout: float #超时时长</span><br><span class=\"line\">xonxoff: bool #软件流控制的开关</span><br><span class=\"line\">rtscts: bool #硬件(RTS/CTS)流控制的开关</span><br><span class=\"line\">dsrdtr: bool #硬件(DSR/DTR)流控制的开关</span><br><span class=\"line\">write_timeout: float #输出的超时时间</span><br><span class=\"line\">inter_byte_timeout: float #字符间隔超时时长，默认设置为None以禁用</span><br><span class=\"line\">in_waiting: int #返回输入缓冲区（待接收）中的字符数量</span><br><span class=\"line\">out_waiting: int #返回输出缓冲区（待发送）中的字符数量</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> - 其中【port】【baudrate】【bytesize】【parity】【stopbits】【in_waiting】很常用。 - 【timeout】的设置会影响read()方法的行为： * 设置为None时，read()会一直从缓冲区中读取数据，直到指定的字符数量已被读取。 * 设置为0时，read()会立即返回读到的从0到指定数量的字符。 * 设置为x（x为整数）时，read()会在达到x秒时返回读到的所有字符，或在此之前返回指定数 量的字符。 ## 常用方法 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def serial.tool.list_ports()</span><br><span class=\"line\">&quot;&quot;&quot;返回所有检测到的串口</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.open()</span><br><span class=\"line\">&quot;&quot;&quot;打开串口</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.close()</span><br><span class=\"line\">&quot;&quot;&quot;关闭串口</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.read(size=1)</span><br><span class=\"line\">&quot;&quot;&quot;从串口中读取最多【size】个的字符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.write(data)</span><br><span class=\"line\">&quot;&quot;&quot;向串口发送数据【data】,【data】的类型为bytes, bytearray或str。</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.flush()</span><br><span class=\"line\">&quot;&quot;&quot;等待所有数据发送完毕</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"例子\">例子</h1>\n<p>封装案例： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">import serial.tools.list_ports</span><br><span class=\"line\"></span><br><span class=\"line\">import platform</span><br><span class=\"line\"></span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PortManager(object):</span><br><span class=\"line\">\t&quot;&quot;&quot;操作串口的类</span><br><span class=\"line\"></span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">        _system: str - 当前应用所在环境的系统类型</span><br><span class=\"line\">        ser: serial.Serial - 串口链接的对象</span><br><span class=\"line\">        _serial_port: str - 串口名称</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    _system = platform.system()</span><br><span class=\"line\">    ser: serial.Serial</span><br><span class=\"line\">    _serial_port: str</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_port(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port的setter&quot;&quot;&quot;</span><br><span class=\"line\">        self._serial_port = port</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_port(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port的getter&quot;&quot;&quot;</span><br><span class=\"line\">        return self._serial_port</span><br><span class=\"line\"></span><br><span class=\"line\">    def list_ports(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;获取并返回所有的串口&quot;&quot;&quot;</span><br><span class=\"line\">        list_p = list(serial.tools.list_ports.comports())</span><br><span class=\"line\">        list_ports_name = []</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.name) for i in list_p]</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.device) for i in list_p]</span><br><span class=\"line\">        return list_ports_name</span><br><span class=\"line\"></span><br><span class=\"line\">    def create_connection(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;创建串口链接&quot;&quot;&quot;</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def send_data(self, value):</span><br><span class=\"line\">    \t&quot;&quot;&quot;向串口发送数据&quot;&quot;&quot;</span><br><span class=\"line\">        write_data = bytearray.fromhex(value)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.out_waiting:</span><br><span class=\"line\">                self.ser.reset_output_buffer()</span><br><span class=\"line\">            if self.ser.write(write_data):</span><br><span class=\"line\">                self.ser.flush()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if self.ser.write(write_data):</span><br><span class=\"line\">                    self.ser.flush()</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def read_data(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;从串口读取数据&quot;&quot;&quot;</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.in_waiting:</span><br><span class=\"line\">                bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                self.ser.reset_input_buffer()</span><br><span class=\"line\">                res = &#x27;&#x27;</span><br><span class=\"line\">                for i in range(len(bs)):</span><br><span class=\"line\">                    res += bs[i]</span><br><span class=\"line\">                    if i % 2 == 1:</span><br><span class=\"line\">                        res += &#x27; &#x27;</span><br><span class=\"line\">                res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                sleep(0.1)</span><br><span class=\"line\">                if self.ser.in_waiting:</span><br><span class=\"line\">                    bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    res = &#x27;&#x27;</span><br><span class=\"line\">                    for i in range(len(bs)):</span><br><span class=\"line\">                        res += bs[i]</span><br><span class=\"line\">                        if i % 2 == 1:</span><br><span class=\"line\">                            res += &#x27; &#x27;</span><br><span class=\"line\">                    res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                    return res</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    return &quot;&quot;</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_input_buffer()</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def close(self, *ser):</span><br><span class=\"line\">    \t&quot;&quot;&quot;关闭串口&quot;&quot;&quot;</span><br><span class=\"line\">        if ser:</span><br><span class=\"line\">            ser[0].close()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.ser.close()</span><br></pre></td></tr></table></figure> # 小结 这是用bootstrap构建的一个web app，主要用途是配置测试公司客制化的继电器板卡。 此app就是利用pyserial与串口通信。</p>\n<p>配置组模式： <img src=\"https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"配置组模式\" /></p>\n<p>板卡控制面板： <img src=\"https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"板卡控制面板\" /></p>\n<p>板卡配置面板： <img src=\"https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"板卡配置面板\" /></p>\n<p>连接错误处理： <img src=\"https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"错误处理\" /></p>\n<p>多板卡级联时的板卡切换： <img src=\"https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"多板卡级联的切换板卡\" /></p>"},{"title":"Concurrent System Study Notes(Continuing...)","date":"2022-01-27T02:37:00.000Z","_content":"\n\n# Signals\n\n## Signal Lifespan\n\nA **signal** is **generated** when a relevant event happens, and is **delivered** when the target process receves it. The lifespan of a signal is from its generation to its delivery.\n\n<!--more-->\n\n## Signal Block vs. Signal Ignore\n\nWhen a process **blocks** a signal, the signal is pending to be unblocked. It is **not delivered** while being blocked.</br>\n\nWhereas when a process **ignores** a signal, the signal **is delivered**, but the process does not respond to the signal.\n\n## Signal Mask\n\n**Signal mask** is a set of signals that will be blocked.</br>\n\nA signal mask is of type `sigset_t`.</br>\n\nTo add/remove signals to/from a signal mask:\n\n```c\nsigset_t mymask;\n\nsigemptyset(&mymask);\t\t\t\\\\ Set the custom mask to contain no signals.\nsigaddset(&mymask, SIGINT);\t\t\\\\ Set the custom mask to contain SIGINT.\nsigdelset(&mymask, SIGINT);\t\t\\\\ Set the custom mask to delete SIGINT.\nsigfillset(&mymask);\t\t\t\\\\ Set the custom mask to contain all the signals.\n```\n\nThen, to make a signal mask effective, call the `sigprocmask()` function:</br>\n(To learn details of `sigprocmask()`, refer to its [man page](https://man7.org/linux/man-pages/man2/sigprocmask.2.html#top_of_page).)\n\n```c\nsigprocmask(SIG_BLOCK, &mymask, NULL);\t\t\\\\ Add signals in \"mymask\" to block list. \n```\n\nHere, `mymask` is like a list that contains all the signals you want to block, it is not yet effective by simply add them to `mymask`. </br>\nTo make them effective, you have to call the `sigprocmask()` function to add them to an \"invisible, unaccessible\" list that actually controls the blockage of signals.\n\nTo remove a list of signals you do not wish to block anymore, put them into a mask, and call `sigprocmask()` with the first parameter being `SIG_UNBLOCK`:\n\n```c\nsigprocmask(SIG_UNBLOCK, &mymask, NULL);\t\\\\ remove signals in \"mymask\" from block list.\n```\nNote that to remove a signal that is not in to block list is permissable.\n\nThe last value of `sigprocmask` is `SIG_SETMASK`, which functions like overwriting what was originally in the block list with the signals in your mask.\n\n## Signal Disposition\n\nSignal disposition is the behavior of the process that received the signal.\n\nTo create a custom signal disposition, use [`sigaction`](https://man7.org/linux/man-pages/man2/sigaction.2.html) struct.\n\n```c\nstruct sigaction my_siga;\n\nvoid siga_handler(){\n\t// ...\n}\n\nmy_siga.sa_handler = &siga_handler();\nsigfillset(&my_siga.sa_mask);\n```\n\nA `sigaction` struct looks something like this:\n\n```c\nstruct sigaction {\n  void     (*sa_handler)(int);  // assign to only one of 'sa_handler' and 'sa_sigaction'.\n  void     (*sa_sigaction)(int, siginfo_t *, void *); // assign to only one of 'sa_handler' and 'sa_sigaction'. see man page.\n  sigset_t   sa_mask;   // signals to be blocked while executing signal handler.\n  int        sa_flags;    // modifies behavior of signals. see man page.\n  void     (*sa_restorer)(void);  // see man page.\n};\n```\n\nAfter customizing your signal disposition, let's make it the disposition of ***SIGALARM*** by calling [`sigaction()`](https://man7.org/linux/man-pages/man2/sigaction.2.html).\n\n```c\nsig_action(SIGALARM, &my_siga, NULL);\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/ConcurrentNotes.md","raw":"---\ntitle: Concurrent System Study Notes(Continuing...)\ntags:\n  - concurrent system\n  - C\n  - operating system\ncategories: Programming & Algorithms\ndate: 2022-01-26 21:37:00\n---\n\n\n# Signals\n\n## Signal Lifespan\n\nA **signal** is **generated** when a relevant event happens, and is **delivered** when the target process receves it. The lifespan of a signal is from its generation to its delivery.\n\n<!--more-->\n\n## Signal Block vs. Signal Ignore\n\nWhen a process **blocks** a signal, the signal is pending to be unblocked. It is **not delivered** while being blocked.</br>\n\nWhereas when a process **ignores** a signal, the signal **is delivered**, but the process does not respond to the signal.\n\n## Signal Mask\n\n**Signal mask** is a set of signals that will be blocked.</br>\n\nA signal mask is of type `sigset_t`.</br>\n\nTo add/remove signals to/from a signal mask:\n\n```c\nsigset_t mymask;\n\nsigemptyset(&mymask);\t\t\t\\\\ Set the custom mask to contain no signals.\nsigaddset(&mymask, SIGINT);\t\t\\\\ Set the custom mask to contain SIGINT.\nsigdelset(&mymask, SIGINT);\t\t\\\\ Set the custom mask to delete SIGINT.\nsigfillset(&mymask);\t\t\t\\\\ Set the custom mask to contain all the signals.\n```\n\nThen, to make a signal mask effective, call the `sigprocmask()` function:</br>\n(To learn details of `sigprocmask()`, refer to its [man page](https://man7.org/linux/man-pages/man2/sigprocmask.2.html#top_of_page).)\n\n```c\nsigprocmask(SIG_BLOCK, &mymask, NULL);\t\t\\\\ Add signals in \"mymask\" to block list. \n```\n\nHere, `mymask` is like a list that contains all the signals you want to block, it is not yet effective by simply add them to `mymask`. </br>\nTo make them effective, you have to call the `sigprocmask()` function to add them to an \"invisible, unaccessible\" list that actually controls the blockage of signals.\n\nTo remove a list of signals you do not wish to block anymore, put them into a mask, and call `sigprocmask()` with the first parameter being `SIG_UNBLOCK`:\n\n```c\nsigprocmask(SIG_UNBLOCK, &mymask, NULL);\t\\\\ remove signals in \"mymask\" from block list.\n```\nNote that to remove a signal that is not in to block list is permissable.\n\nThe last value of `sigprocmask` is `SIG_SETMASK`, which functions like overwriting what was originally in the block list with the signals in your mask.\n\n## Signal Disposition\n\nSignal disposition is the behavior of the process that received the signal.\n\nTo create a custom signal disposition, use [`sigaction`](https://man7.org/linux/man-pages/man2/sigaction.2.html) struct.\n\n```c\nstruct sigaction my_siga;\n\nvoid siga_handler(){\n\t// ...\n}\n\nmy_siga.sa_handler = &siga_handler();\nsigfillset(&my_siga.sa_mask);\n```\n\nA `sigaction` struct looks something like this:\n\n```c\nstruct sigaction {\n  void     (*sa_handler)(int);  // assign to only one of 'sa_handler' and 'sa_sigaction'.\n  void     (*sa_sigaction)(int, siginfo_t *, void *); // assign to only one of 'sa_handler' and 'sa_sigaction'. see man page.\n  sigset_t   sa_mask;   // signals to be blocked while executing signal handler.\n  int        sa_flags;    // modifies behavior of signals. see man page.\n  void     (*sa_restorer)(void);  // see man page.\n};\n```\n\nAfter customizing your signal disposition, let's make it the disposition of ***SIGALARM*** by calling [`sigaction()`](https://man7.org/linux/man-pages/man2/sigaction.2.html).\n\n```c\nsig_action(SIGALARM, &my_siga, NULL);\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"ConcurrentNotes","published":1,"updated":"2022-01-29T17:41:33.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87ud6jf0008vnudap8regcc","content":"<h1 id=\"signals\">Signals</h1>\n<h2 id=\"signal-lifespan\">Signal Lifespan</h2>\n<p>A <strong>signal</strong> is <strong>generated</strong> when a relevant event happens, and is <strong>delivered</strong> when the target process receves it. The lifespan of a signal is from its generation to its delivery.</p>\n<span id=\"more\"></span>\n<h2 id=\"signal-block-vs.-signal-ignore\">Signal Block vs. Signal Ignore</h2>\n<p>When a process <strong>blocks</strong> a signal, the signal is pending to be unblocked. It is <strong>not delivered</strong> while being blocked.</br></p>\n<p>Whereas when a process <strong>ignores</strong> a signal, the signal <strong>is delivered</strong>, but the process does not respond to the signal.</p>\n<h2 id=\"signal-mask\">Signal Mask</h2>\n<p><strong>Signal mask</strong> is a set of signals that will be blocked.</br></p>\n<p>A signal mask is of type <code>sigset_t</code>.</br></p>\n<p>To add/remove signals to/from a signal mask:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sigset_t</span> mymask;</span><br><span class=\"line\"></span><br><span class=\"line\">sigemptyset(&amp;mymask);\t\t\t\\\\ Set the custom mask to contain no signals.</span><br><span class=\"line\">sigaddset(&amp;mymask, SIGINT);\t\t\\\\ Set the custom mask to contain SIGINT.</span><br><span class=\"line\">sigdelset(&amp;mymask, SIGINT);\t\t\\\\ Set the custom mask to <span class=\"keyword\">delete</span> SIGINT.</span><br><span class=\"line\">sigfillset(&amp;mymask);\t\t\t\\\\ Set the custom mask to contain all the signals.</span><br></pre></td></tr></table></figure>\n<p>Then, to make a signal mask effective, call the <code>sigprocmask()</code> function:</br> (To learn details of <code>sigprocmask()</code>, refer to its <a href=\"https://man7.org/linux/man-pages/man2/sigprocmask.2.html#top_of_page\">man page</a>.)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sigprocmask(SIG_BLOCK, &amp;mymask, <span class=\"literal\">NULL</span>);\t\t\\\\ Add signals in <span class=\"string\">&quot;mymask&quot;</span> to block <span class=\"built_in\">list</span>. </span><br></pre></td></tr></table></figure>\n<p>Here, <code>mymask</code> is like a list that contains all the signals you want to block, it is not yet effective by simply add them to <code>mymask</code>. </br> To make them effective, you have to call the <code>sigprocmask()</code> function to add them to an \"invisible, unaccessible\" list that actually controls the blockage of signals.</p>\n<p>To remove a list of signals you do not wish to block anymore, put them into a mask, and call <code>sigprocmask()</code> with the first parameter being <code>SIG_UNBLOCK</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sigprocmask(SIG_UNBLOCK, &amp;mymask, <span class=\"literal\">NULL</span>);\t\\\\ remove signals in <span class=\"string\">&quot;mymask&quot;</span> from block <span class=\"built_in\">list</span>.</span><br></pre></td></tr></table></figure>\n<p>Note that to remove a signal that is not in to block list is permissable.</p>\n<p>The last value of <code>sigprocmask</code> is <code>SIG_SETMASK</code>, which functions like overwriting what was originally in the block list with the signals in your mask.</p>\n<h2 id=\"signal-disposition\">Signal Disposition</h2>\n<p>Signal disposition is the behavior of the process that received the signal.</p>\n<p>To create a custom signal disposition, use <a href=\"https://man7.org/linux/man-pages/man2/sigaction.2.html\"><code>sigaction</code></a> struct.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">my_siga</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">siga_handler</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">my_siga.sa_handler = &amp;siga_handler();</span><br><span class=\"line\">sigfillset(&amp;my_siga.sa_mask);</span><br></pre></td></tr></table></figure>\n<p>A <code>sigaction</code> struct looks something like this:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span>     (*sa_handler)(<span class=\"keyword\">int</span>);  <span class=\"comment\">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;.</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span>     (*sa_sigaction)(<span class=\"keyword\">int</span>, <span class=\"keyword\">siginfo_t</span> *, <span class=\"keyword\">void</span> *); <span class=\"comment\">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;. see man page.</span></span><br><span class=\"line\">  <span class=\"keyword\">sigset_t</span>   sa_mask;   <span class=\"comment\">// signals to be blocked while executing signal handler.</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span>        sa_flags;    <span class=\"comment\">// modifies behavior of signals. see man page.</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span>     (*sa_restorer)(<span class=\"keyword\">void</span>);  <span class=\"comment\">// see man page.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>After customizing your signal disposition, let's make it the disposition of <strong><em>SIGALARM</em></strong> by calling <a href=\"https://man7.org/linux/man-pages/man2/sigaction.2.html\"><code>sigaction()</code></a>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sig_action(SIGALARM, &amp;my_siga, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2453,"excerpt":"<h1 id=\"signals\">Signals</h1>\n<h2 id=\"signal-lifespan\">Signal Lifespan</h2>\n<p>A <strong>signal</strong> is <strong>generated</strong> when a relevant event happens, and is <strong>delivered</strong> when the target process receves it. The lifespan of a signal is from its generation to its delivery.</p>","more":"<h2 id=\"signal-block-vs.-signal-ignore\">Signal Block vs. Signal Ignore</h2>\n<p>When a process <strong>blocks</strong> a signal, the signal is pending to be unblocked. It is <strong>not delivered</strong> while being blocked.</br></p>\n<p>Whereas when a process <strong>ignores</strong> a signal, the signal <strong>is delivered</strong>, but the process does not respond to the signal.</p>\n<h2 id=\"signal-mask\">Signal Mask</h2>\n<p><strong>Signal mask</strong> is a set of signals that will be blocked.</br></p>\n<p>A signal mask is of type <code>sigset_t</code>.</br></p>\n<p>To add/remove signals to/from a signal mask:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sigset_t</span> mymask;</span><br><span class=\"line\"></span><br><span class=\"line\">sigemptyset(&amp;mymask);\t\t\t\\\\ Set the custom mask to contain no signals.</span><br><span class=\"line\">sigaddset(&amp;mymask, SIGINT);\t\t\\\\ Set the custom mask to contain SIGINT.</span><br><span class=\"line\">sigdelset(&amp;mymask, SIGINT);\t\t\\\\ Set the custom mask to <span class=\"keyword\">delete</span> SIGINT.</span><br><span class=\"line\">sigfillset(&amp;mymask);\t\t\t\\\\ Set the custom mask to contain all the signals.</span><br></pre></td></tr></table></figure>\n<p>Then, to make a signal mask effective, call the <code>sigprocmask()</code> function:</br> (To learn details of <code>sigprocmask()</code>, refer to its <a href=\"https://man7.org/linux/man-pages/man2/sigprocmask.2.html#top_of_page\">man page</a>.)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sigprocmask(SIG_BLOCK, &amp;mymask, <span class=\"literal\">NULL</span>);\t\t\\\\ Add signals in <span class=\"string\">&quot;mymask&quot;</span> to block <span class=\"built_in\">list</span>. </span><br></pre></td></tr></table></figure>\n<p>Here, <code>mymask</code> is like a list that contains all the signals you want to block, it is not yet effective by simply add them to <code>mymask</code>. </br> To make them effective, you have to call the <code>sigprocmask()</code> function to add them to an \"invisible, unaccessible\" list that actually controls the blockage of signals.</p>\n<p>To remove a list of signals you do not wish to block anymore, put them into a mask, and call <code>sigprocmask()</code> with the first parameter being <code>SIG_UNBLOCK</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sigprocmask(SIG_UNBLOCK, &amp;mymask, <span class=\"literal\">NULL</span>);\t\\\\ remove signals in <span class=\"string\">&quot;mymask&quot;</span> from block <span class=\"built_in\">list</span>.</span><br></pre></td></tr></table></figure>\n<p>Note that to remove a signal that is not in to block list is permissable.</p>\n<p>The last value of <code>sigprocmask</code> is <code>SIG_SETMASK</code>, which functions like overwriting what was originally in the block list with the signals in your mask.</p>\n<h2 id=\"signal-disposition\">Signal Disposition</h2>\n<p>Signal disposition is the behavior of the process that received the signal.</p>\n<p>To create a custom signal disposition, use <a href=\"https://man7.org/linux/man-pages/man2/sigaction.2.html\"><code>sigaction</code></a> struct.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">my_siga</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">siga_handler</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">my_siga.sa_handler = &amp;siga_handler();</span><br><span class=\"line\">sigfillset(&amp;my_siga.sa_mask);</span><br></pre></td></tr></table></figure>\n<p>A <code>sigaction</code> struct looks something like this:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span>     (*sa_handler)(<span class=\"keyword\">int</span>);  <span class=\"comment\">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;.</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span>     (*sa_sigaction)(<span class=\"keyword\">int</span>, <span class=\"keyword\">siginfo_t</span> *, <span class=\"keyword\">void</span> *); <span class=\"comment\">// assign to only one of &#x27;sa_handler&#x27; and &#x27;sa_sigaction&#x27;. see man page.</span></span><br><span class=\"line\">  <span class=\"keyword\">sigset_t</span>   sa_mask;   <span class=\"comment\">// signals to be blocked while executing signal handler.</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span>        sa_flags;    <span class=\"comment\">// modifies behavior of signals. see man page.</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span>     (*sa_restorer)(<span class=\"keyword\">void</span>);  <span class=\"comment\">// see man page.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>After customizing your signal disposition, let's make it the disposition of <strong><em>SIGALARM</em></strong> by calling <a href=\"https://man7.org/linux/man-pages/man2/sigaction.2.html\"><code>sigaction()</code></a>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sig_action(SIGALARM, &amp;my_siga, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>"},{"title":"Deploying Flask project on CentOS 8","date":"2021-07-03T16:06:54.000Z","_content":"\n\n\n# Preface\nThe reason for writing this note is I met a lot of problems that do not have direct solutions that can be found online. I thought writing it down could help a lot as I may still face similar issues in the future.\n<!--more-->\n\n# About the server\n\nI purchased a server provided by Ali cloud, which was on a almost 60% discount when I bought it. \n\n# About dependencies\n\n## Python version\n\n***yum*** is a convenient instruction on CentOS. ***yum*** provides 4 versions of ***Python***:\n\n- python2 \n- python36\n- python38\n- python39\n \nFor instance, if you wish to install python 3.9, simply type in\n```\nyum install python39\n```\nIf you are prompted with permission denied, add ```sudo``` before the command.\n\n## Virtual environment\n\nWhy is a venv (vertual environment) needed?\n\nThe good thing about venv is that it has a scope limited to one project. It will not affect your system-level settings, and it is independent from other projects. For instance, when one of your project needs Fabric 1.x and another needs Fabric 2.x, and both project has venv, there will not be a conflict. However, if you do not have venv enabled, you will have to delete one version of Fabric.\n\nThe official documentary suggests using\n```\npython3 -m venv (/path to new virtual environment)\n```\nto create a new venv.\n\nFor instance, you can use\n```\npython3 -m venv venv\n```\nto create a venv under current working directory.\n\nAfter that, use\n```\nsource ./venv/bin/activate\n```\nto activate venv.\n\nTo deactivate venv, simply type in\n```\ndeactivate\n```\n.\n\n## Dependencies\n\nThis part requires your ***Flask*** project to be all set, waiting to be synchronized to the server. \n\nYou can use\n```\npip freeze > requirements.txt\n```\nto extract all packages installed in the current venv, and save them into a file named 'requirements.txt'.\n\nTo install all dependencies on server, simply type in:\n```\npip install -r requiremtns.txt\n```\nNote that if you are prompted permission denied, Python documentary recommends using '--user' option instead of adding a sudo. The effect of this option is to install the package into current user's home directory, instead of under where python is installed.\n\n# Install ***Nginx***\n\n***Nginx*** is already packed by ***yum***, so we can use\n\n```\nsudo yum install nginx\n```\nto install nginx.\n\nAfter installation, you can check if the installation was successful by\n```\nnginx -v\n```\n.\n\nThese are a few common commands:\n```\nsudo systemctl enable nginx //Start Nginx upon booting\nsudo systemctl start nginx //Start Nginx\nsudo systemctl stop nginx //Shut down Nginx\nsudo systemctl restart nginx //Reload Nginx\nsudo systemctl status nginx //Check status of Nginx\n```\n\n# Install ***uwsgi***\n\nYou can install ***uwsgi*** through\n```\npip install uwsgi\n```\n.\n\nAfter installation, you can check if the installation was successful by\n```\nuwsgi --version\n```\n.\n\n# Deploy to server\n\nConnect to your server, enter the directory under which you want your project to be placed.\n\nSynchroze your project with git, scp or sftp.\n\nMake sure the python version on your server matches that on your computer.\n\nThen, you can proceed to install dependencies using\n```\npip install -r requirements.txt\n```\t\n.\n\n## ***uwsgi*** initialization\n\nCreate a file named 'uwsgi.ini' under your project's root directory.\nIn the file, type in\n```\n[uwsgi]\nsocket=127.0.0.1:5000 //The port can be altered.\n\nchdir=/home/wst/wms //Your project's root directory.\n\nwsgi-file=app.py //Your start file. Note this is a relative path to your root dir.\n\ncallable=app //The name of your start file instance.\n\nprocesses=4 \n\nthreads=2\n\nmaster=true\n\nstats=127.0.0.1:9191\n\n```\nRemember to delete the side notes. ***uwsgi*** cannot tell the difference between comments and scripts.\n\n## Nginx configuration\n\nThe configuration file for ***Nginx***, 'nginx.conf', is usually located under '/etc/nginx' directory. If you cannot find it, type in\n```\nsudo nginx -t\n```\nto see where is it.\n\nOpen it with a text editor:\n```\nsudo vim /etc/nginx/nginx.conf\n```\n, and you will see something like:\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers PROFILE=SYSTEM;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n\n}\n```\nChange 'server_name' inside 'server' to your ip address or your domain name.\n\nAdd two lines under 'root'. One is 'access_log', the other is 'error_log'.\n\nEnable 'uwsgi_params' in 'location /'.\n\n```\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  xxx.xxx.xxx.xxx;\n        root         /usr/share/nginx/html;\n        access_log  /home/wst/wms/logs/access.log;\n        error_log  /home/wst/wms/logs/error.log;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n       \t\tinclude     uwsgi_params;\n        \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致\n\t        uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址\n\t        uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址\n\t        uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\nThen use\n```\nsudo nginx -t\n```\nto check if there is any grammatical error.\nIf you are not prompted an error, type in\n```\nsudo systemctl restart nginx\n```\n.\nNow you should be able to see your web app running on your domain or your ip address.\n","source":"_posts/DeployAFlaskProj.md","raw":"---\ntitle: Deploying Flask project on CentOS 8\ntags:\n  - Python\n  - Linux\ncategories: Linux & Shell\ndate: 2021-07-03 12:06:54\n---\n\n\n\n# Preface\nThe reason for writing this note is I met a lot of problems that do not have direct solutions that can be found online. I thought writing it down could help a lot as I may still face similar issues in the future.\n<!--more-->\n\n# About the server\n\nI purchased a server provided by Ali cloud, which was on a almost 60% discount when I bought it. \n\n# About dependencies\n\n## Python version\n\n***yum*** is a convenient instruction on CentOS. ***yum*** provides 4 versions of ***Python***:\n\n- python2 \n- python36\n- python38\n- python39\n \nFor instance, if you wish to install python 3.9, simply type in\n```\nyum install python39\n```\nIf you are prompted with permission denied, add ```sudo``` before the command.\n\n## Virtual environment\n\nWhy is a venv (vertual environment) needed?\n\nThe good thing about venv is that it has a scope limited to one project. It will not affect your system-level settings, and it is independent from other projects. For instance, when one of your project needs Fabric 1.x and another needs Fabric 2.x, and both project has venv, there will not be a conflict. However, if you do not have venv enabled, you will have to delete one version of Fabric.\n\nThe official documentary suggests using\n```\npython3 -m venv (/path to new virtual environment)\n```\nto create a new venv.\n\nFor instance, you can use\n```\npython3 -m venv venv\n```\nto create a venv under current working directory.\n\nAfter that, use\n```\nsource ./venv/bin/activate\n```\nto activate venv.\n\nTo deactivate venv, simply type in\n```\ndeactivate\n```\n.\n\n## Dependencies\n\nThis part requires your ***Flask*** project to be all set, waiting to be synchronized to the server. \n\nYou can use\n```\npip freeze > requirements.txt\n```\nto extract all packages installed in the current venv, and save them into a file named 'requirements.txt'.\n\nTo install all dependencies on server, simply type in:\n```\npip install -r requiremtns.txt\n```\nNote that if you are prompted permission denied, Python documentary recommends using '--user' option instead of adding a sudo. The effect of this option is to install the package into current user's home directory, instead of under where python is installed.\n\n# Install ***Nginx***\n\n***Nginx*** is already packed by ***yum***, so we can use\n\n```\nsudo yum install nginx\n```\nto install nginx.\n\nAfter installation, you can check if the installation was successful by\n```\nnginx -v\n```\n.\n\nThese are a few common commands:\n```\nsudo systemctl enable nginx //Start Nginx upon booting\nsudo systemctl start nginx //Start Nginx\nsudo systemctl stop nginx //Shut down Nginx\nsudo systemctl restart nginx //Reload Nginx\nsudo systemctl status nginx //Check status of Nginx\n```\n\n# Install ***uwsgi***\n\nYou can install ***uwsgi*** through\n```\npip install uwsgi\n```\n.\n\nAfter installation, you can check if the installation was successful by\n```\nuwsgi --version\n```\n.\n\n# Deploy to server\n\nConnect to your server, enter the directory under which you want your project to be placed.\n\nSynchroze your project with git, scp or sftp.\n\nMake sure the python version on your server matches that on your computer.\n\nThen, you can proceed to install dependencies using\n```\npip install -r requirements.txt\n```\t\n.\n\n## ***uwsgi*** initialization\n\nCreate a file named 'uwsgi.ini' under your project's root directory.\nIn the file, type in\n```\n[uwsgi]\nsocket=127.0.0.1:5000 //The port can be altered.\n\nchdir=/home/wst/wms //Your project's root directory.\n\nwsgi-file=app.py //Your start file. Note this is a relative path to your root dir.\n\ncallable=app //The name of your start file instance.\n\nprocesses=4 \n\nthreads=2\n\nmaster=true\n\nstats=127.0.0.1:9191\n\n```\nRemember to delete the side notes. ***uwsgi*** cannot tell the difference between comments and scripts.\n\n## Nginx configuration\n\nThe configuration file for ***Nginx***, 'nginx.conf', is usually located under '/etc/nginx' directory. If you cannot find it, type in\n```\nsudo nginx -t\n```\nto see where is it.\n\nOpen it with a text editor:\n```\nsudo vim /etc/nginx/nginx.conf\n```\n, and you will see something like:\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers PROFILE=SYSTEM;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n\n}\n```\nChange 'server_name' inside 'server' to your ip address or your domain name.\n\nAdd two lines under 'root'. One is 'access_log', the other is 'error_log'.\n\nEnable 'uwsgi_params' in 'location /'.\n\n```\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  xxx.xxx.xxx.xxx;\n        root         /usr/share/nginx/html;\n        access_log  /home/wst/wms/logs/access.log;\n        error_log  /home/wst/wms/logs/error.log;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n       \t\tinclude     uwsgi_params;\n        \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致\n\t        uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址\n\t        uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址\n\t        uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\nThen use\n```\nsudo nginx -t\n```\nto check if there is any grammatical error.\nIf you are not prompted an error, type in\n```\nsudo systemctl restart nginx\n```\n.\nNow you should be able to see your web app running on your domain or your ip address.\n","slug":"DeployAFlaskProj","published":1,"updated":"2022-09-18T21:31:59.478Z","_id":"cl87ud6jg000bvnud0hsddywk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"preface\">Preface</h1>\n<p>The reason for writing this note is I met a lot of problems that do not have direct solutions that can be found online. I thought writing it down could help a lot as I may still face similar issues in the future. <span id=\"more\"></span></p>\n<h1 id=\"about-the-server\">About the server</h1>\n<p>I purchased a server provided by Ali cloud, which was on a almost 60% discount when I bought it.</p>\n<h1 id=\"about-dependencies\">About dependencies</h1>\n<h2 id=\"python-version\">Python version</h2>\n<p><strong><em>yum</em></strong> is a convenient instruction on CentOS. <strong><em>yum</em></strong> provides 4 versions of <strong><em>Python</em></strong>:</p>\n<ul>\n<li>python2</li>\n<li>python36</li>\n<li>python38</li>\n<li>python39</li>\n</ul>\n<p>For instance, if you wish to install python 3.9, simply type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python39</span><br></pre></td></tr></table></figure> If you are prompted with permission denied, add <code>sudo</code> before the command.</p>\n<h2 id=\"virtual-environment\">Virtual environment</h2>\n<p>Why is a venv (vertual environment) needed?</p>\n<p>The good thing about venv is that it has a scope limited to one project. It will not affect your system-level settings, and it is independent from other projects. For instance, when one of your project needs Fabric 1.x and another needs Fabric 2.x, and both project has venv, there will not be a conflict. However, if you do not have venv enabled, you will have to delete one version of Fabric.</p>\n<p>The official documentary suggests using <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv (/path to new virtual environment)</span><br></pre></td></tr></table></figure> to create a new venv.</p>\n<p>For instance, you can use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv venv</span><br></pre></td></tr></table></figure> to create a venv under current working directory.</p>\n<p>After that, use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ./venv/bin/activate</span><br></pre></td></tr></table></figure> to activate venv.</p>\n<p>To deactivate venv, simply type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure> .</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>This part requires your <strong><em>Flask</em></strong> project to be all set, waiting to be synchronized to the server.</p>\n<p>You can use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure> to extract all packages installed in the current venv, and save them into a file named 'requirements.txt'.</p>\n<p>To install all dependencies on server, simply type in: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requiremtns.txt</span><br></pre></td></tr></table></figure> Note that if you are prompted permission denied, Python documentary recommends using '--user' option instead of adding a sudo. The effect of this option is to install the package into current user's home directory, instead of under where python is installed.</p>\n<h1 id=\"install-nginx\">Install <strong><em>Nginx</em></strong></h1>\n<p><strong><em>Nginx</em></strong> is already packed by <strong><em>yum</em></strong>, so we can use</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n<p>to install nginx.</p>\n<p>After installation, you can check if the installation was successful by <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure> .</p>\n<p>These are a few common commands: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx //Start Nginx upon booting</span><br><span class=\"line\">sudo systemctl start nginx //Start Nginx</span><br><span class=\"line\">sudo systemctl stop nginx //Shut down Nginx</span><br><span class=\"line\">sudo systemctl restart nginx //Reload Nginx</span><br><span class=\"line\">sudo systemctl status nginx //Check status of Nginx</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"install-uwsgi\">Install <strong><em>uwsgi</em></strong></h1>\n<p>You can install <strong><em>uwsgi</em></strong> through <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure> .</p>\n<p>After installation, you can check if the installation was successful by <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --version</span><br></pre></td></tr></table></figure> .</p>\n<h1 id=\"deploy-to-server\">Deploy to server</h1>\n<p>Connect to your server, enter the directory under which you want your project to be placed.</p>\n<p>Synchroze your project with git, scp or sftp.</p>\n<p>Make sure the python version on your server matches that on your computer.</p>\n<p>Then, you can proceed to install dependencies using <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure> .</p>\n<h2 id=\"uwsgi-initialization\"><strong><em>uwsgi</em></strong> initialization</h2>\n<p>Create a file named 'uwsgi.ini' under your project's root directory. In the file, type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\">socket=127.0.0.1:5000 //The port can be altered.</span><br><span class=\"line\"></span><br><span class=\"line\">chdir=/home/wst/wms //Your project&#x27;s root directory.</span><br><span class=\"line\"></span><br><span class=\"line\">wsgi-file=app.py //Your start file. Note this is a relative path to your root dir.</span><br><span class=\"line\"></span><br><span class=\"line\">callable=app //The name of your start file instance.</span><br><span class=\"line\"></span><br><span class=\"line\">processes=4 </span><br><span class=\"line\"></span><br><span class=\"line\">threads=2</span><br><span class=\"line\"></span><br><span class=\"line\">master=true</span><br><span class=\"line\"></span><br><span class=\"line\">stats=127.0.0.1:9191</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> Remember to delete the side notes. <strong><em>uwsgi</em></strong> cannot tell the difference between comments and scripts.</p>\n<h2 id=\"nginx-configuration\">Nginx configuration</h2>\n<p>The configuration file for <strong><em>Nginx</em></strong>, 'nginx.conf', is usually located under '/etc/nginx' directory. If you cannot find it, type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> to see where is it.</p>\n<p>Open it with a text editor: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure> , and you will see something like: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For more information on configuration, see:</span><br><span class=\"line\">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class=\"line\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class=\"line\"></span><br><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Settings for a TLS enabled server.</span><br><span class=\"line\">#</span><br><span class=\"line\">#    server &#123;</span><br><span class=\"line\">#        listen       443 ssl http2 default_server;</span><br><span class=\"line\">#        listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">#        server_name  _;</span><br><span class=\"line\">#        root         /usr/share/nginx/html;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">#        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">#        ssl_session_timeout  10m;</span><br><span class=\"line\">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class=\"line\">#        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        # Load configuration files for the default server block.</span><br><span class=\"line\">#        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        location / &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 404 /404.html;</span><br><span class=\"line\">#            location = /40x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">#            location = /50x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> Change 'server_name' inside 'server' to your ip address or your domain name.</p>\n<p>Add two lines under 'root'. One is 'access_log', the other is 'error_log'.</p>\n<p>Enable 'uwsgi_params' in 'location /'.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  xxx.xxx.xxx.xxx;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\">    access_log  /home/wst/wms/logs/access.log;</span><br><span class=\"line\">    error_log  /home/wst/wms/logs/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">   \t\tinclude     uwsgi_params;</span><br><span class=\"line\">    \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致</span><br><span class=\"line\">     uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址</span><br><span class=\"line\">     uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址</span><br><span class=\"line\">     uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> to check if there is any grammatical error. If you are not prompted an error, type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure> . Now you should be able to see your web app running on your domain or your ip address.</p>\n","site":{"data":{}},"length":6285,"excerpt":"<h1 id=\"preface\">Preface</h1>\n<p>The reason for writing this note is I met a lot of problems that do not have direct solutions that can be found online. I thought writing it down could help a lot as I may still face similar issues in the future.","more":"</p>\n<h1 id=\"about-the-server\">About the server</h1>\n<p>I purchased a server provided by Ali cloud, which was on a almost 60% discount when I bought it.</p>\n<h1 id=\"about-dependencies\">About dependencies</h1>\n<h2 id=\"python-version\">Python version</h2>\n<p><strong><em>yum</em></strong> is a convenient instruction on CentOS. <strong><em>yum</em></strong> provides 4 versions of <strong><em>Python</em></strong>:</p>\n<ul>\n<li>python2</li>\n<li>python36</li>\n<li>python38</li>\n<li>python39</li>\n</ul>\n<p>For instance, if you wish to install python 3.9, simply type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python39</span><br></pre></td></tr></table></figure> If you are prompted with permission denied, add <code>sudo</code> before the command.</p>\n<h2 id=\"virtual-environment\">Virtual environment</h2>\n<p>Why is a venv (vertual environment) needed?</p>\n<p>The good thing about venv is that it has a scope limited to one project. It will not affect your system-level settings, and it is independent from other projects. For instance, when one of your project needs Fabric 1.x and another needs Fabric 2.x, and both project has venv, there will not be a conflict. However, if you do not have venv enabled, you will have to delete one version of Fabric.</p>\n<p>The official documentary suggests using <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv (/path to new virtual environment)</span><br></pre></td></tr></table></figure> to create a new venv.</p>\n<p>For instance, you can use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv venv</span><br></pre></td></tr></table></figure> to create a venv under current working directory.</p>\n<p>After that, use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ./venv/bin/activate</span><br></pre></td></tr></table></figure> to activate venv.</p>\n<p>To deactivate venv, simply type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure> .</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>This part requires your <strong><em>Flask</em></strong> project to be all set, waiting to be synchronized to the server.</p>\n<p>You can use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure> to extract all packages installed in the current venv, and save them into a file named 'requirements.txt'.</p>\n<p>To install all dependencies on server, simply type in: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requiremtns.txt</span><br></pre></td></tr></table></figure> Note that if you are prompted permission denied, Python documentary recommends using '--user' option instead of adding a sudo. The effect of this option is to install the package into current user's home directory, instead of under where python is installed.</p>\n<h1 id=\"install-nginx\">Install <strong><em>Nginx</em></strong></h1>\n<p><strong><em>Nginx</em></strong> is already packed by <strong><em>yum</em></strong>, so we can use</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n<p>to install nginx.</p>\n<p>After installation, you can check if the installation was successful by <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure> .</p>\n<p>These are a few common commands: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx //Start Nginx upon booting</span><br><span class=\"line\">sudo systemctl start nginx //Start Nginx</span><br><span class=\"line\">sudo systemctl stop nginx //Shut down Nginx</span><br><span class=\"line\">sudo systemctl restart nginx //Reload Nginx</span><br><span class=\"line\">sudo systemctl status nginx //Check status of Nginx</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"install-uwsgi\">Install <strong><em>uwsgi</em></strong></h1>\n<p>You can install <strong><em>uwsgi</em></strong> through <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure> .</p>\n<p>After installation, you can check if the installation was successful by <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --version</span><br></pre></td></tr></table></figure> .</p>\n<h1 id=\"deploy-to-server\">Deploy to server</h1>\n<p>Connect to your server, enter the directory under which you want your project to be placed.</p>\n<p>Synchroze your project with git, scp or sftp.</p>\n<p>Make sure the python version on your server matches that on your computer.</p>\n<p>Then, you can proceed to install dependencies using <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure> .</p>\n<h2 id=\"uwsgi-initialization\"><strong><em>uwsgi</em></strong> initialization</h2>\n<p>Create a file named 'uwsgi.ini' under your project's root directory. In the file, type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\">socket=127.0.0.1:5000 //The port can be altered.</span><br><span class=\"line\"></span><br><span class=\"line\">chdir=/home/wst/wms //Your project&#x27;s root directory.</span><br><span class=\"line\"></span><br><span class=\"line\">wsgi-file=app.py //Your start file. Note this is a relative path to your root dir.</span><br><span class=\"line\"></span><br><span class=\"line\">callable=app //The name of your start file instance.</span><br><span class=\"line\"></span><br><span class=\"line\">processes=4 </span><br><span class=\"line\"></span><br><span class=\"line\">threads=2</span><br><span class=\"line\"></span><br><span class=\"line\">master=true</span><br><span class=\"line\"></span><br><span class=\"line\">stats=127.0.0.1:9191</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> Remember to delete the side notes. <strong><em>uwsgi</em></strong> cannot tell the difference between comments and scripts.</p>\n<h2 id=\"nginx-configuration\">Nginx configuration</h2>\n<p>The configuration file for <strong><em>Nginx</em></strong>, 'nginx.conf', is usually located under '/etc/nginx' directory. If you cannot find it, type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> to see where is it.</p>\n<p>Open it with a text editor: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure> , and you will see something like: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># For more information on configuration, see:</span><br><span class=\"line\">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class=\"line\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class=\"line\"></span><br><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;</span><br><span class=\"line\">        listen       [::]:80 default_server;</span><br><span class=\"line\">        server_name  _;</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Settings for a TLS enabled server.</span><br><span class=\"line\">#</span><br><span class=\"line\">#    server &#123;</span><br><span class=\"line\">#        listen       443 ssl http2 default_server;</span><br><span class=\"line\">#        listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">#        server_name  _;</span><br><span class=\"line\">#        root         /usr/share/nginx/html;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">#        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">#        ssl_session_timeout  10m;</span><br><span class=\"line\">#        ssl_ciphers PROFILE=SYSTEM;</span><br><span class=\"line\">#        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        # Load configuration files for the default server block.</span><br><span class=\"line\">#        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        location / &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 404 /404.html;</span><br><span class=\"line\">#            location = /40x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">#        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">#            location = /50x.html &#123;</span><br><span class=\"line\">#        &#125;</span><br><span class=\"line\">#    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> Change 'server_name' inside 'server' to your ip address or your domain name.</p>\n<p>Add two lines under 'root'. One is 'access_log', the other is 'error_log'.</p>\n<p>Enable 'uwsgi_params' in 'location /'.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80 default_server;</span><br><span class=\"line\">    listen       [::]:80 default_server;</span><br><span class=\"line\">    server_name  xxx.xxx.xxx.xxx;</span><br><span class=\"line\">    root         /usr/share/nginx/html;</span><br><span class=\"line\">    access_log  /home/wst/wms/logs/access.log;</span><br><span class=\"line\">    error_log  /home/wst/wms/logs/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">   \t\tinclude     uwsgi_params;</span><br><span class=\"line\">    \tuwsgi_pass      127.0.0.1:5000; #这里与uwsgi配置文件里的socket保持一致</span><br><span class=\"line\">     uwsgi_param UWSGI_PYHOME /home/wst/wms/venv; #python虚拟环境的地址</span><br><span class=\"line\">     uwsgi_param UWSGI_CHDIR  /home/wst/wms; #项目根目录地址</span><br><span class=\"line\">     uwsgi_param UWSGI_SCRIPT app:app; #启动脚本名:实例名</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then use <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure> to check if there is any grammatical error. If you are not prompted an error, type in <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure> . Now you should be able to see your web app running on your domain or your ip address.</p>"},{"title":"Multithreading in Java","date":"2022-01-23T02:16:08.000Z","_content":"\n\n# Preface\nI wanted to build a website of my own from scratch using Java recently, and so I found myself a hands-on tutorial. The very first step was to write small components called ***servlet***, which\nrequired multithreading.\n<!--more-->\n\n# Multithreading Basics\nIn an OS, every application executing is usually called a ***process***, while each ***process*** can contain multiple ***threads***.\nTake a typical music player as an example: a music player usually is capable of playing the music while showing the lyrics, and maybe show the album cover as well. Here, one thread will take care of playing the music, while another will take care of synchronizing the lyrics.\nOne process contains at least one thread, but it can contain multiple threads.\n\n# Multithreding in Java\n\n## Multithreading procedure\n\nAfter creating a ***Thread*** instance, a new thread will wait for the```start()``` method to be called so that it will enter ***Ready*** state.</br>\nWhile being in ***Ready*** state, a thread will stay in the ready queue, waiting to be called. </br>\nWhen a thread in ***Ready*** state acquire CPU resources, it can be put to use by calling the ```run()``` method. In this procedure, the thread is in ***Running*** state.</br>\nWhen a thread runs out of CPU time, or the ```wait()``` method is called, the thread will enter ***Blocked*** state. While in ***Blocked*** state, the thread will remain in this state unless it regains CPU resources.\n\n## Creating a new ***Thread*** Instance\n\n\n```java\npublic class ThreadRunnable extends Thread{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\nor\n\n```java\npublic class ThreadRunnable implements Runnable{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\n\n## Synchronization between threads\n\n### Atomic operation\n\nAssignment like</br>\n```java\nn = n + 1;\n```\n\nseems to look like a single instrution, however, it consists of at least three instructions.\n\n```\n// erroneous Assembly.\nld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.\naddi x5, x5, 1\t\t// n = n + 1.\nsd x5, sp(0)\t\t// save n = n + 1 back.\n```\n\nAtomic operations are indivisible:\n\n```java\nint n;   //---  addi sp sp -8\t\tmake room on the stack for one int.\n```\n\n### Shared variable in Multithreading\nConsider this: initialize ```n``` to 0, and create two threads. One thread, say thread1 will execute ```n += 1``` for 10000 times and the other thread, thread2 will execute ```n -= 1``` for 10000 times. Would you expect ```n == 0```? </br>\nThe fact is, the result might differ every time this snippet of codes is executed. This is because, very possibly, after thread1 add 1 to ```n``` 10000 times, and before it could store the result, thread2 takes over CPU resources and found that ```n``` is still 0.\n\n### synchronized key word\n\n```java\nsynchronized(lock object){\n\t// clauses\n}\n```\nAll clauses in side of these ```{```, ```}``` will be locked.</br>\n\n\n\n","source":"_posts/MultithreadingInJava.md","raw":"---\ntitle: Multithreading in Java\ntags:\n  - Java\n  - Multithreading\ncategories: Programming & Algorithms\ndate: 2022-01-22 21:16:08\n---\n\n\n# Preface\nI wanted to build a website of my own from scratch using Java recently, and so I found myself a hands-on tutorial. The very first step was to write small components called ***servlet***, which\nrequired multithreading.\n<!--more-->\n\n# Multithreading Basics\nIn an OS, every application executing is usually called a ***process***, while each ***process*** can contain multiple ***threads***.\nTake a typical music player as an example: a music player usually is capable of playing the music while showing the lyrics, and maybe show the album cover as well. Here, one thread will take care of playing the music, while another will take care of synchronizing the lyrics.\nOne process contains at least one thread, but it can contain multiple threads.\n\n# Multithreding in Java\n\n## Multithreading procedure\n\nAfter creating a ***Thread*** instance, a new thread will wait for the```start()``` method to be called so that it will enter ***Ready*** state.</br>\nWhile being in ***Ready*** state, a thread will stay in the ready queue, waiting to be called. </br>\nWhen a thread in ***Ready*** state acquire CPU resources, it can be put to use by calling the ```run()``` method. In this procedure, the thread is in ***Running*** state.</br>\nWhen a thread runs out of CPU time, or the ```wait()``` method is called, the thread will enter ***Blocked*** state. While in ***Blocked*** state, the thread will remain in this state unless it regains CPU resources.\n\n## Creating a new ***Thread*** Instance\n\n\n```java\npublic class ThreadRunnable extends Thread{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\nor\n\n```java\npublic class ThreadRunnable implements Runnable{\n\t/* override run() method */\n\tprivate void run(){\n\t\t/* */\n\t}\n}\n```\n\n## Synchronization between threads\n\n### Atomic operation\n\nAssignment like</br>\n```java\nn = n + 1;\n```\n\nseems to look like a single instrution, however, it consists of at least three instructions.\n\n```\n// erroneous Assembly.\nld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.\naddi x5, x5, 1\t\t// n = n + 1.\nsd x5, sp(0)\t\t// save n = n + 1 back.\n```\n\nAtomic operations are indivisible:\n\n```java\nint n;   //---  addi sp sp -8\t\tmake room on the stack for one int.\n```\n\n### Shared variable in Multithreading\nConsider this: initialize ```n``` to 0, and create two threads. One thread, say thread1 will execute ```n += 1``` for 10000 times and the other thread, thread2 will execute ```n -= 1``` for 10000 times. Would you expect ```n == 0```? </br>\nThe fact is, the result might differ every time this snippet of codes is executed. This is because, very possibly, after thread1 add 1 to ```n``` 10000 times, and before it could store the result, thread2 takes over CPU resources and found that ```n``` is still 0.\n\n### synchronized key word\n\n```java\nsynchronized(lock object){\n\t// clauses\n}\n```\nAll clauses in side of these ```{```, ```}``` will be locked.</br>\n\n\n\n","slug":"MultithreadingInJava","published":1,"updated":"2022-09-18T21:34:36.578Z","_id":"cl87ud6jh000cvnud3jo6d054","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"preface\">Preface</h1>\n<p>I wanted to build a website of my own from scratch using Java recently, and so I found myself a hands-on tutorial. The very first step was to write small components called <strong><em>servlet</em></strong>, which required multithreading. <span id=\"more\"></span></p>\n<h1 id=\"multithreading-basics\">Multithreading Basics</h1>\n<p>In an OS, every application executing is usually called a <strong><em>process</em></strong>, while each <strong><em>process</em></strong> can contain multiple <strong><em>threads</em></strong>. Take a typical music player as an example: a music player usually is capable of playing the music while showing the lyrics, and maybe show the album cover as well. Here, one thread will take care of playing the music, while another will take care of synchronizing the lyrics. One process contains at least one thread, but it can contain multiple threads.</p>\n<h1 id=\"multithreding-in-java\">Multithreding in Java</h1>\n<h2 id=\"multithreading-procedure\">Multithreading procedure</h2>\n<p>After creating a <strong><em>Thread</em></strong> instance, a new thread will wait for the<code>start()</code> method to be called so that it will enter <strong><em>Ready</em></strong> state.</br> While being in <strong><em>Ready</em></strong> state, a thread will stay in the ready queue, waiting to be called. </br> When a thread in <strong><em>Ready</em></strong> state acquire CPU resources, it can be put to use by calling the <code>run()</code> method. In this procedure, the thread is in <strong><em>Running</em></strong> state.</br> When a thread runs out of CPU time, or the <code>wait()</code> method is called, the thread will enter <strong><em>Blocked</em></strong> state. While in <strong><em>Blocked</em></strong> state, the thread will remain in this state unless it regains CPU resources.</p>\n<h2 id=\"creating-a-new-thread-instance\">Creating a new <strong><em>Thread</em></strong> Instance</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"synchronization-between-threads\">Synchronization between threads</h2>\n<h3 id=\"atomic-operation\">Atomic operation</h3>\n<p>Assignment like</br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = n + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<p>seems to look like a single instrution, however, it consists of at least three instructions.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// erroneous Assembly.</span><br><span class=\"line\">ld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.</span><br><span class=\"line\">addi x5, x5, 1\t\t// n = n + 1.</span><br><span class=\"line\">sd x5, sp(0)\t\t// save n = n + 1 back.</span><br></pre></td></tr></table></figure>\n<p>Atomic operations are indivisible:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;   <span class=\"comment\">//---  addi sp sp -8\t\tmake room on the stack for one int.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"shared-variable-in-multithreading\">Shared variable in Multithreading</h3>\n<p>Consider this: initialize <code>n</code> to 0, and create two threads. One thread, say thread1 will execute <code>n += 1</code> for 10000 times and the other thread, thread2 will execute <code>n -= 1</code> for 10000 times. Would you expect <code>n == 0</code>? </br> The fact is, the result might differ every time this snippet of codes is executed. This is because, very possibly, after thread1 add 1 to <code>n</code> 10000 times, and before it could store the result, thread2 takes over CPU resources and found that <code>n</code> is still 0.</p>\n<h3 id=\"synchronized-key-word\">synchronized key word</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock object)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// clauses</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>All clauses in side of these <code>&#123;</code>, <code>&#125;</code> will be locked.</br></p>\n","site":{"data":{}},"length":2227,"excerpt":"<h1 id=\"preface\">Preface</h1>\n<p>I wanted to build a website of my own from scratch using Java recently, and so I found myself a hands-on tutorial. The very first step was to write small components called <strong><em>servlet</em></strong>, which required multithreading.","more":"</p>\n<h1 id=\"multithreading-basics\">Multithreading Basics</h1>\n<p>In an OS, every application executing is usually called a <strong><em>process</em></strong>, while each <strong><em>process</em></strong> can contain multiple <strong><em>threads</em></strong>. Take a typical music player as an example: a music player usually is capable of playing the music while showing the lyrics, and maybe show the album cover as well. Here, one thread will take care of playing the music, while another will take care of synchronizing the lyrics. One process contains at least one thread, but it can contain multiple threads.</p>\n<h1 id=\"multithreding-in-java\">Multithreding in Java</h1>\n<h2 id=\"multithreading-procedure\">Multithreading procedure</h2>\n<p>After creating a <strong><em>Thread</em></strong> instance, a new thread will wait for the<code>start()</code> method to be called so that it will enter <strong><em>Ready</em></strong> state.</br> While being in <strong><em>Ready</em></strong> state, a thread will stay in the ready queue, waiting to be called. </br> When a thread in <strong><em>Ready</em></strong> state acquire CPU resources, it can be put to use by calling the <code>run()</code> method. In this procedure, the thread is in <strong><em>Running</em></strong> state.</br> When a thread runs out of CPU time, or the <code>wait()</code> method is called, the thread will enter <strong><em>Blocked</em></strong> state. While in <strong><em>Blocked</em></strong> state, the thread will remain in this state unless it regains CPU resources.</p>\n<h2 id=\"creating-a-new-thread-instance\">Creating a new <strong><em>Thread</em></strong> Instance</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* override run() method */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"synchronization-between-threads\">Synchronization between threads</h2>\n<h3 id=\"atomic-operation\">Atomic operation</h3>\n<p>Assignment like</br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = n + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<p>seems to look like a single instrution, however, it consists of at least three instructions.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// erroneous Assembly.</span><br><span class=\"line\">ld sp(0), x5\t\t// suppose stack pointer is pointing to n and load it into x5.</span><br><span class=\"line\">addi x5, x5, 1\t\t// n = n + 1.</span><br><span class=\"line\">sd x5, sp(0)\t\t// save n = n + 1 back.</span><br></pre></td></tr></table></figure>\n<p>Atomic operations are indivisible:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;   <span class=\"comment\">//---  addi sp sp -8\t\tmake room on the stack for one int.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"shared-variable-in-multithreading\">Shared variable in Multithreading</h3>\n<p>Consider this: initialize <code>n</code> to 0, and create two threads. One thread, say thread1 will execute <code>n += 1</code> for 10000 times and the other thread, thread2 will execute <code>n -= 1</code> for 10000 times. Would you expect <code>n == 0</code>? </br> The fact is, the result might differ every time this snippet of codes is executed. This is because, very possibly, after thread1 add 1 to <code>n</code> 10000 times, and before it could store the result, thread2 takes over CPU resources and found that <code>n</code> is still 0.</p>\n<h3 id=\"synchronized-key-word\">synchronized key word</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock object)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// clauses</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>All clauses in side of these <code>&#123;</code>, <code>&#125;</code> will be locked.</br></p>"},{"title":"Notes on using Pyserial","date":"2021-08-17T15:55:32.000Z","_content":"\n\n# About ***Pyserial***\nThis module encapsulates the access methods for serial ports. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend.\n<!--more-->\n\n# Installing ***Pyserial***\nInstall using ***pip***：\n```bash\npip install pyserial\n```\n\n# Serial object\nThe object is ```serial.Serial```.\nDue to business needs, this app requires compatibility with Windows and MacOS.\nHowever, port names are different in Windows and MacOS.\nIn Windows, port names have a format of [COMx], where x is an integer；\nIn MacOS, port names are like [/dev/xxxxx], where x is the specific port name.\nIf you have similar needs, remember to import the ```platform``` package.\n```python3\nimport serial\n\n\tdef create_connection(self, port):\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n```\n\n## Common properties\nListed below are all properties of a ```Serial``` object：\n```python3\nport: str #port name\nbaudrate: int\nbytesize #possible values：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS\nparity #possible values：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE\nstopbits #possible values：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO\ntimeout: float \nxonxoff: bool #switch of software flow control\nrtscts: bool #switch of hardware(RTS/CTS) flow control\ndsrdtr: bool #switch of hardware(DSR/DTR) flow control\nwrite_timeout: float \ninter_byte_timeout: float #set to None to disable\nin_waiting: int \nout_waiting: int \n\n```\n\n- [port], [baudrate], [bytesize], [parity], [stopbits], [in_waiting]are very commonly used.\n- Setting of [timeout] will impact the behavior of ```read()``` method：\n  * When set to None, ```read()``` will keep trying to read data from buffer until specified number of characters are read.\n  * When set to 0, ```read()``` will immediately return all characters read ranges from 0 to specified number.\n  * When set to x (x is an integer), ```read()``` will return specified number of characters before x seconds have elapsed, or ```read()``` will return all characters read after x seconds have elapsed.\n  \n## Common methods\n```python3\n\ndef serial.tool.list_ports()\n\"\"\"return all ports scanned\n\"\"\"\n\nserial.Serial.open()\n\"\"\"open serial port\n\"\"\"\n\nserial.Serial.close()\n\"\"\"shut serial port\n\"\"\"\n\nserial.Serial.read(size=1)\n\"\"\"read at most n=size characters from the port\n\"\"\"\n\nserial.Serial.write(data)\n\"\"\"send what's inside data to the port. The type of data must be bytes, bytearray or str.\n\"\"\"\n\nserial.Serial.flush()\n\"\"\"Wait for all data to be sent.\n\"\"\"\n```\n\n# Example\nEncapsulation instance：\n```python3\nimport serial\n\nimport serial.tools.list_ports\n\nimport platform\n\nfrom time import sleep\n\n\nclass PortManager(object):\n\t\"\"\"The class that manages the port\n\n    Attributes:\n        _system: str  #The system where the app is running\n        ser: serial.Serial  #Serial port object\n        _serial_port: str  #Serial port name\n    \"\"\"\n\n    _system = platform.system()\n    ser: serial.Serial\n    _serial_port: str\n\n    def set_port(self, port):\n    \t\"\"\"_serial_port setter\"\"\"\n        self._serial_port = port\n\n    def get_port(self):\n    \t\"\"\"_serial_port getter\"\"\"\n        return self._serial_port\n\n    def list_ports(self):\n    \t\"\"\"Get and return all ports scanned\"\"\"\n        list_p = list(serial.tools.list_ports.comports())\n        list_ports_name = []\n        if self._system.lower() == \"darwin\":\n            list_ports_name = [str(i.name) for i in list_p]\n        elif self._system.lower() == \"windows\":\n            list_ports_name = [str(i.device) for i in list_p]\n        return list_ports_name\n\n    def create_connection(self, port):\n    \t\"\"\"Create serial port connection\"\"\"\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n\n    def send_data(self, value):\n    \t\"\"\"Send data to the port\"\"\"\n        write_data = bytearray.fromhex(value)\n        try:\n            sleep(0.1)\n            if self.ser.out_waiting:\n                self.ser.reset_output_buffer()\n            if self.ser.write(write_data):\n                self.ser.flush()\n            else:\n                if self.ser.write(write_data):\n                    self.ser.flush()\n            self.ser.reset_output_buffer()\n            return True\n        except Exception as e:\n            print(e)\n            self.ser.reset_output_buffer()\n            return False\n\n    def read_data(self):\n    \t\"\"\"Read data from the port\"\"\"\n        try:\n            sleep(0.1)\n            if self.ser.in_waiting:\n                bs = self.ser.read(self.ser.in_waiting).hex()\n                self.ser.reset_input_buffer()\n                res = ''\n                for i in range(len(bs)):\n                    res += bs[i]\n                    if i % 2 == 1:\n                        res += ' '\n                res = res.rstrip(' ')\n                return res\n            else:\n                sleep(0.1)\n                if self.ser.in_waiting:\n                    bs = self.ser.read(self.ser.in_waiting).hex()\n                    self.ser.reset_input_buffer()\n                    res = ''\n                    for i in range(len(bs)):\n                        res += bs[i]\n                        if i % 2 == 1:\n                            res += ' '\n                    res = res.rstrip(' ')\n                    return res\n                else:\n                    self.ser.reset_input_buffer()\n                    return \"\"\n        except Exception as e:\n            print(e)\n            self.ser.reset_input_buffer()\n            return None\n\n    def close(self, *ser):\n    \t\"\"\"close the port\"\"\"\n        if ser:\n            ser[0].close()\n        else:\n            self.ser.close()\n```\n\n# Conclusion\nThis is a web app built by me using ***Bootstrap***, which is mainly used to test the customized relay boards of the company I worked in. This app utilized pyserial to communicate through serial ports.\n\nConfigure group mode：\n![Configure group mode](https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\nBoard control panel：\n![Board control panel](https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\nBoard configure panel：\n![Board configure panel](https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\nConnection error handling：\n![Error handling](https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\nChange target board in multiple boards cascading：\n![Change target board in multiple boards cascading](https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n","source":"_posts/NoteAboutPyserial.md","raw":"---\ntitle: Notes on using Pyserial\ntags:\n  - Python\ncategories: Programming & Algorithms\ndate: 2021-08-17 11:55:32\n---\n\n\n# About ***Pyserial***\nThis module encapsulates the access methods for serial ports. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend.\n<!--more-->\n\n# Installing ***Pyserial***\nInstall using ***pip***：\n```bash\npip install pyserial\n```\n\n# Serial object\nThe object is ```serial.Serial```.\nDue to business needs, this app requires compatibility with Windows and MacOS.\nHowever, port names are different in Windows and MacOS.\nIn Windows, port names have a format of [COMx], where x is an integer；\nIn MacOS, port names are like [/dev/xxxxx], where x is the specific port name.\nIf you have similar needs, remember to import the ```platform``` package.\n```python3\nimport serial\n\n\tdef create_connection(self, port):\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n```\n\n## Common properties\nListed below are all properties of a ```Serial``` object：\n```python3\nport: str #port name\nbaudrate: int\nbytesize #possible values：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS\nparity #possible values：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE\nstopbits #possible values：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO\ntimeout: float \nxonxoff: bool #switch of software flow control\nrtscts: bool #switch of hardware(RTS/CTS) flow control\ndsrdtr: bool #switch of hardware(DSR/DTR) flow control\nwrite_timeout: float \ninter_byte_timeout: float #set to None to disable\nin_waiting: int \nout_waiting: int \n\n```\n\n- [port], [baudrate], [bytesize], [parity], [stopbits], [in_waiting]are very commonly used.\n- Setting of [timeout] will impact the behavior of ```read()``` method：\n  * When set to None, ```read()``` will keep trying to read data from buffer until specified number of characters are read.\n  * When set to 0, ```read()``` will immediately return all characters read ranges from 0 to specified number.\n  * When set to x (x is an integer), ```read()``` will return specified number of characters before x seconds have elapsed, or ```read()``` will return all characters read after x seconds have elapsed.\n  \n## Common methods\n```python3\n\ndef serial.tool.list_ports()\n\"\"\"return all ports scanned\n\"\"\"\n\nserial.Serial.open()\n\"\"\"open serial port\n\"\"\"\n\nserial.Serial.close()\n\"\"\"shut serial port\n\"\"\"\n\nserial.Serial.read(size=1)\n\"\"\"read at most n=size characters from the port\n\"\"\"\n\nserial.Serial.write(data)\n\"\"\"send what's inside data to the port. The type of data must be bytes, bytearray or str.\n\"\"\"\n\nserial.Serial.flush()\n\"\"\"Wait for all data to be sent.\n\"\"\"\n```\n\n# Example\nEncapsulation instance：\n```python3\nimport serial\n\nimport serial.tools.list_ports\n\nimport platform\n\nfrom time import sleep\n\n\nclass PortManager(object):\n\t\"\"\"The class that manages the port\n\n    Attributes:\n        _system: str  #The system where the app is running\n        ser: serial.Serial  #Serial port object\n        _serial_port: str  #Serial port name\n    \"\"\"\n\n    _system = platform.system()\n    ser: serial.Serial\n    _serial_port: str\n\n    def set_port(self, port):\n    \t\"\"\"_serial_port setter\"\"\"\n        self._serial_port = port\n\n    def get_port(self):\n    \t\"\"\"_serial_port getter\"\"\"\n        return self._serial_port\n\n    def list_ports(self):\n    \t\"\"\"Get and return all ports scanned\"\"\"\n        list_p = list(serial.tools.list_ports.comports())\n        list_ports_name = []\n        if self._system.lower() == \"darwin\":\n            list_ports_name = [str(i.name) for i in list_p]\n        elif self._system.lower() == \"windows\":\n            list_ports_name = [str(i.device) for i in list_p]\n        return list_ports_name\n\n    def create_connection(self, port):\n    \t\"\"\"Create serial port connection\"\"\"\n        if self._system.lower() == \"darwin\":\n            self.ser = serial.Serial(port=\"/dev/{}\".format(port),\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n        elif self._system.lower() == \"windows\":\n            self.ser = serial.Serial(port=port,\n                                     baudrate=115200,\n                                     bytesize=8,\n                                     stopbits=1)\n\n    def send_data(self, value):\n    \t\"\"\"Send data to the port\"\"\"\n        write_data = bytearray.fromhex(value)\n        try:\n            sleep(0.1)\n            if self.ser.out_waiting:\n                self.ser.reset_output_buffer()\n            if self.ser.write(write_data):\n                self.ser.flush()\n            else:\n                if self.ser.write(write_data):\n                    self.ser.flush()\n            self.ser.reset_output_buffer()\n            return True\n        except Exception as e:\n            print(e)\n            self.ser.reset_output_buffer()\n            return False\n\n    def read_data(self):\n    \t\"\"\"Read data from the port\"\"\"\n        try:\n            sleep(0.1)\n            if self.ser.in_waiting:\n                bs = self.ser.read(self.ser.in_waiting).hex()\n                self.ser.reset_input_buffer()\n                res = ''\n                for i in range(len(bs)):\n                    res += bs[i]\n                    if i % 2 == 1:\n                        res += ' '\n                res = res.rstrip(' ')\n                return res\n            else:\n                sleep(0.1)\n                if self.ser.in_waiting:\n                    bs = self.ser.read(self.ser.in_waiting).hex()\n                    self.ser.reset_input_buffer()\n                    res = ''\n                    for i in range(len(bs)):\n                        res += bs[i]\n                        if i % 2 == 1:\n                            res += ' '\n                    res = res.rstrip(' ')\n                    return res\n                else:\n                    self.ser.reset_input_buffer()\n                    return \"\"\n        except Exception as e:\n            print(e)\n            self.ser.reset_input_buffer()\n            return None\n\n    def close(self, *ser):\n    \t\"\"\"close the port\"\"\"\n        if ser:\n            ser[0].close()\n        else:\n            self.ser.close()\n```\n\n# Conclusion\nThis is a web app built by me using ***Bootstrap***, which is mainly used to test the customized relay boards of the company I worked in. This app utilized pyserial to communicate through serial ports.\n\nConfigure group mode：\n![Configure group mode](https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\nBoard control panel：\n![Board control panel](https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\nBoard configure panel：\n![Board configure panel](https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\nConnection error handling：\n![Error handling](https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n\nChange target board in multiple boards cascading：\n![Change target board in multiple boards cascading](https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center)\n\n","slug":"NoteAboutPyserial","published":1,"updated":"2022-09-18T21:37:38.085Z","_id":"cl87ud6ji000gvnudh0hhhez2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"about-pyserial\">About <strong><em>Pyserial</em></strong></h1>\n<p>This module encapsulates the access methods for serial ports. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend. <span id=\"more\"></span></p>\n<h1 id=\"installing-pyserial\">Installing <strong><em>Pyserial</em></strong></h1>\n<p>Install using <strong><em>pip</em></strong>： <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyserial</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"serial-object\">Serial object</h1>\n<p>The object is <code>serial.Serial</code>. Due to business needs, this app requires compatibility with Windows and MacOS. However, port names are different in Windows and MacOS. In Windows, port names have a format of [COMx], where x is an integer； In MacOS, port names are like [/dev/xxxxx], where x is the specific port name. If you have similar needs, remember to import the <code>platform</code> package. <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef create_connection(self, port):</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"common-properties\">Common properties</h2>\n<p>Listed below are all properties of a <code>Serial</code> object： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: str #port name</span><br><span class=\"line\">baudrate: int</span><br><span class=\"line\">bytesize #possible values：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS</span><br><span class=\"line\">parity #possible values：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE</span><br><span class=\"line\">stopbits #possible values：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO</span><br><span class=\"line\">timeout: float </span><br><span class=\"line\">xonxoff: bool #switch of software flow control</span><br><span class=\"line\">rtscts: bool #switch of hardware(RTS/CTS) flow control</span><br><span class=\"line\">dsrdtr: bool #switch of hardware(DSR/DTR) flow control</span><br><span class=\"line\">write_timeout: float </span><br><span class=\"line\">inter_byte_timeout: float #set to None to disable</span><br><span class=\"line\">in_waiting: int </span><br><span class=\"line\">out_waiting: int </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>[port], [baudrate], [bytesize], [parity], [stopbits], [in_waiting]are very commonly used.</li>\n<li>Setting of [timeout] will impact the behavior of <code>read()</code> method：\n<ul>\n<li>When set to None, <code>read()</code> will keep trying to read data from buffer until specified number of characters are read.</li>\n<li>When set to 0, <code>read()</code> will immediately return all characters read ranges from 0 to specified number.</li>\n<li>When set to x (x is an integer), <code>read()</code> will return specified number of characters before x seconds have elapsed, or <code>read()</code> will return all characters read after x seconds have elapsed.</li>\n</ul></li>\n</ul>\n<h2 id=\"common-methods\">Common methods</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def serial.tool.list_ports()</span><br><span class=\"line\">&quot;&quot;&quot;return all ports scanned</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.open()</span><br><span class=\"line\">&quot;&quot;&quot;open serial port</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.close()</span><br><span class=\"line\">&quot;&quot;&quot;shut serial port</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.read(size=1)</span><br><span class=\"line\">&quot;&quot;&quot;read at most n=size characters from the port</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.write(data)</span><br><span class=\"line\">&quot;&quot;&quot;send what&#x27;s inside data to the port. The type of data must be bytes, bytearray or str.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.flush()</span><br><span class=\"line\">&quot;&quot;&quot;Wait for all data to be sent.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"example\">Example</h1>\n<p>Encapsulation instance： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">import serial.tools.list_ports</span><br><span class=\"line\"></span><br><span class=\"line\">import platform</span><br><span class=\"line\"></span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PortManager(object):</span><br><span class=\"line\">\t&quot;&quot;&quot;The class that manages the port</span><br><span class=\"line\"></span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">        _system: str  #The system where the app is running</span><br><span class=\"line\">        ser: serial.Serial  #Serial port object</span><br><span class=\"line\">        _serial_port: str  #Serial port name</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    _system = platform.system()</span><br><span class=\"line\">    ser: serial.Serial</span><br><span class=\"line\">    _serial_port: str</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_port(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port setter&quot;&quot;&quot;</span><br><span class=\"line\">        self._serial_port = port</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_port(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port getter&quot;&quot;&quot;</span><br><span class=\"line\">        return self._serial_port</span><br><span class=\"line\"></span><br><span class=\"line\">    def list_ports(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Get and return all ports scanned&quot;&quot;&quot;</span><br><span class=\"line\">        list_p = list(serial.tools.list_ports.comports())</span><br><span class=\"line\">        list_ports_name = []</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.name) for i in list_p]</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.device) for i in list_p]</span><br><span class=\"line\">        return list_ports_name</span><br><span class=\"line\"></span><br><span class=\"line\">    def create_connection(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Create serial port connection&quot;&quot;&quot;</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def send_data(self, value):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Send data to the port&quot;&quot;&quot;</span><br><span class=\"line\">        write_data = bytearray.fromhex(value)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.out_waiting:</span><br><span class=\"line\">                self.ser.reset_output_buffer()</span><br><span class=\"line\">            if self.ser.write(write_data):</span><br><span class=\"line\">                self.ser.flush()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if self.ser.write(write_data):</span><br><span class=\"line\">                    self.ser.flush()</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def read_data(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Read data from the port&quot;&quot;&quot;</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.in_waiting:</span><br><span class=\"line\">                bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                self.ser.reset_input_buffer()</span><br><span class=\"line\">                res = &#x27;&#x27;</span><br><span class=\"line\">                for i in range(len(bs)):</span><br><span class=\"line\">                    res += bs[i]</span><br><span class=\"line\">                    if i % 2 == 1:</span><br><span class=\"line\">                        res += &#x27; &#x27;</span><br><span class=\"line\">                res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                sleep(0.1)</span><br><span class=\"line\">                if self.ser.in_waiting:</span><br><span class=\"line\">                    bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    res = &#x27;&#x27;</span><br><span class=\"line\">                    for i in range(len(bs)):</span><br><span class=\"line\">                        res += bs[i]</span><br><span class=\"line\">                        if i % 2 == 1:</span><br><span class=\"line\">                            res += &#x27; &#x27;</span><br><span class=\"line\">                    res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                    return res</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    return &quot;&quot;</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_input_buffer()</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def close(self, *ser):</span><br><span class=\"line\">    \t&quot;&quot;&quot;close the port&quot;&quot;&quot;</span><br><span class=\"line\">        if ser:</span><br><span class=\"line\">            ser[0].close()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.ser.close()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>This is a web app built by me using <strong><em>Bootstrap</em></strong>, which is mainly used to test the customized relay boards of the company I worked in. This app utilized pyserial to communicate through serial ports.</p>\n<p>Configure group mode： <img src=\"https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Configure group mode\" /></p>\n<p>Board control panel： <img src=\"https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Board control panel\" /></p>\n<p>Board configure panel： <img src=\"https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Board configure panel\" /></p>\n<p>Connection error handling： <img src=\"https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Error handling\" /></p>\n<p>Change target board in multiple boards cascading： <img src=\"https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Change target board in multiple boards cascading\" /></p>\n","site":{"data":{}},"length":5474,"excerpt":"<h1 id=\"about-pyserial\">About <strong><em>Pyserial</em></strong></h1>\n<p>This module encapsulates the access methods for serial ports. It provides backends for Python running on Windows, OSX, Linux, BSD (possibly any POSIX compliant system) and IronPython. The module named “serial” automatically selects the appropriate backend.","more":"</p>\n<h1 id=\"installing-pyserial\">Installing <strong><em>Pyserial</em></strong></h1>\n<p>Install using <strong><em>pip</em></strong>： <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyserial</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"serial-object\">Serial object</h1>\n<p>The object is <code>serial.Serial</code>. Due to business needs, this app requires compatibility with Windows and MacOS. However, port names are different in Windows and MacOS. In Windows, port names have a format of [COMx], where x is an integer； In MacOS, port names are like [/dev/xxxxx], where x is the specific port name. If you have similar needs, remember to import the <code>platform</code> package. <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef create_connection(self, port):</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"common-properties\">Common properties</h2>\n<p>Listed below are all properties of a <code>Serial</code> object： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: str #port name</span><br><span class=\"line\">baudrate: int</span><br><span class=\"line\">bytesize #possible values：FIVEBITS, SIXBITS, SEVENBITS, EIGHTBITS</span><br><span class=\"line\">parity #possible values：PARITY_NONE, PARITY_EVEN, PARITY_ODD PARITY_MARK, PARITY_SPACE</span><br><span class=\"line\">stopbits #possible values：STOPBITS_ONE, STOPBITS_ONE_POINT_FIVE, STOPBITS_TWO</span><br><span class=\"line\">timeout: float </span><br><span class=\"line\">xonxoff: bool #switch of software flow control</span><br><span class=\"line\">rtscts: bool #switch of hardware(RTS/CTS) flow control</span><br><span class=\"line\">dsrdtr: bool #switch of hardware(DSR/DTR) flow control</span><br><span class=\"line\">write_timeout: float </span><br><span class=\"line\">inter_byte_timeout: float #set to None to disable</span><br><span class=\"line\">in_waiting: int </span><br><span class=\"line\">out_waiting: int </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>[port], [baudrate], [bytesize], [parity], [stopbits], [in_waiting]are very commonly used.</li>\n<li>Setting of [timeout] will impact the behavior of <code>read()</code> method：\n<ul>\n<li>When set to None, <code>read()</code> will keep trying to read data from buffer until specified number of characters are read.</li>\n<li>When set to 0, <code>read()</code> will immediately return all characters read ranges from 0 to specified number.</li>\n<li>When set to x (x is an integer), <code>read()</code> will return specified number of characters before x seconds have elapsed, or <code>read()</code> will return all characters read after x seconds have elapsed.</li>\n</ul></li>\n</ul>\n<h2 id=\"common-methods\">Common methods</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def serial.tool.list_ports()</span><br><span class=\"line\">&quot;&quot;&quot;return all ports scanned</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.open()</span><br><span class=\"line\">&quot;&quot;&quot;open serial port</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.close()</span><br><span class=\"line\">&quot;&quot;&quot;shut serial port</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.read(size=1)</span><br><span class=\"line\">&quot;&quot;&quot;read at most n=size characters from the port</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.write(data)</span><br><span class=\"line\">&quot;&quot;&quot;send what&#x27;s inside data to the port. The type of data must be bytes, bytearray or str.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">serial.Serial.flush()</span><br><span class=\"line\">&quot;&quot;&quot;Wait for all data to be sent.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"example\">Example</h1>\n<p>Encapsulation instance： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import serial</span><br><span class=\"line\"></span><br><span class=\"line\">import serial.tools.list_ports</span><br><span class=\"line\"></span><br><span class=\"line\">import platform</span><br><span class=\"line\"></span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PortManager(object):</span><br><span class=\"line\">\t&quot;&quot;&quot;The class that manages the port</span><br><span class=\"line\"></span><br><span class=\"line\">    Attributes:</span><br><span class=\"line\">        _system: str  #The system where the app is running</span><br><span class=\"line\">        ser: serial.Serial  #Serial port object</span><br><span class=\"line\">        _serial_port: str  #Serial port name</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    _system = platform.system()</span><br><span class=\"line\">    ser: serial.Serial</span><br><span class=\"line\">    _serial_port: str</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_port(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port setter&quot;&quot;&quot;</span><br><span class=\"line\">        self._serial_port = port</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_port(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;_serial_port getter&quot;&quot;&quot;</span><br><span class=\"line\">        return self._serial_port</span><br><span class=\"line\"></span><br><span class=\"line\">    def list_ports(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Get and return all ports scanned&quot;&quot;&quot;</span><br><span class=\"line\">        list_p = list(serial.tools.list_ports.comports())</span><br><span class=\"line\">        list_ports_name = []</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.name) for i in list_p]</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            list_ports_name = [str(i.device) for i in list_p]</span><br><span class=\"line\">        return list_ports_name</span><br><span class=\"line\"></span><br><span class=\"line\">    def create_connection(self, port):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Create serial port connection&quot;&quot;&quot;</span><br><span class=\"line\">        if self._system.lower() == &quot;darwin&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=&quot;/dev/&#123;&#125;&quot;.format(port),</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\">        elif self._system.lower() == &quot;windows&quot;:</span><br><span class=\"line\">            self.ser = serial.Serial(port=port,</span><br><span class=\"line\">                                     baudrate=115200,</span><br><span class=\"line\">                                     bytesize=8,</span><br><span class=\"line\">                                     stopbits=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def send_data(self, value):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Send data to the port&quot;&quot;&quot;</span><br><span class=\"line\">        write_data = bytearray.fromhex(value)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.out_waiting:</span><br><span class=\"line\">                self.ser.reset_output_buffer()</span><br><span class=\"line\">            if self.ser.write(write_data):</span><br><span class=\"line\">                self.ser.flush()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if self.ser.write(write_data):</span><br><span class=\"line\">                    self.ser.flush()</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_output_buffer()</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def read_data(self):</span><br><span class=\"line\">    \t&quot;&quot;&quot;Read data from the port&quot;&quot;&quot;</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            sleep(0.1)</span><br><span class=\"line\">            if self.ser.in_waiting:</span><br><span class=\"line\">                bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                self.ser.reset_input_buffer()</span><br><span class=\"line\">                res = &#x27;&#x27;</span><br><span class=\"line\">                for i in range(len(bs)):</span><br><span class=\"line\">                    res += bs[i]</span><br><span class=\"line\">                    if i % 2 == 1:</span><br><span class=\"line\">                        res += &#x27; &#x27;</span><br><span class=\"line\">                res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                sleep(0.1)</span><br><span class=\"line\">                if self.ser.in_waiting:</span><br><span class=\"line\">                    bs = self.ser.read(self.ser.in_waiting).hex()</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    res = &#x27;&#x27;</span><br><span class=\"line\">                    for i in range(len(bs)):</span><br><span class=\"line\">                        res += bs[i]</span><br><span class=\"line\">                        if i % 2 == 1:</span><br><span class=\"line\">                            res += &#x27; &#x27;</span><br><span class=\"line\">                    res = res.rstrip(&#x27; &#x27;)</span><br><span class=\"line\">                    return res</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    self.ser.reset_input_buffer()</span><br><span class=\"line\">                    return &quot;&quot;</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            self.ser.reset_input_buffer()</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def close(self, *ser):</span><br><span class=\"line\">    \t&quot;&quot;&quot;close the port&quot;&quot;&quot;</span><br><span class=\"line\">        if ser:</span><br><span class=\"line\">            ser[0].close()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.ser.close()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>This is a web app built by me using <strong><em>Bootstrap</em></strong>, which is mainly used to test the customized relay boards of the company I worked in. This app utilized pyserial to communicate through serial ports.</p>\n<p>Configure group mode： <img src=\"https://img-blog.csdnimg.cn/77e1cb3e8a1f44a9bc17ebff2dd9ce4f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Configure group mode\" /></p>\n<p>Board control panel： <img src=\"https://img-blog.csdnimg.cn/7ab9122042ec4ef789ae30cf09504336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Board control panel\" /></p>\n<p>Board configure panel： <img src=\"https://img-blog.csdnimg.cn/13190e0c95464b2f924fdde87921cd47.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Board configure panel\" /></p>\n<p>Connection error handling： <img src=\"https://img-blog.csdnimg.cn/83a747f39605441f80378d995b55463d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Error handling\" /></p>\n<p>Change target board in multiple boards cascading： <img src=\"https://img-blog.csdnimg.cn/cae4af3ecaab4583a4fadaa91a2e8575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDczMzMz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Change target board in multiple boards cascading\" /></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl87ud6je0007vnudfe4678vu","category_id":"cl87ud6jc0004vnude2o3fmus","_id":"cl87ud6jh000dvnudagln0trt"},{"post_id":"cl87ud6j80001vnudbsih1lu9","category_id":"cl87ud6jc0004vnude2o3fmus","_id":"cl87ud6ji000hvnudaz6eb274"},{"post_id":"cl87ud6jf0008vnudap8regcc","category_id":"cl87ud6jc0004vnude2o3fmus","_id":"cl87ud6ji000jvnuda5of4glp"},{"post_id":"cl87ud6jg000bvnud0hsddywk","category_id":"cl87ud6jf0009vnudfqr5cx1r","_id":"cl87ud6jj000mvnud2n1d6hh8"},{"post_id":"cl87ud6jb0003vnudb1kbefbc","category_id":"cl87ud6jf0009vnudfqr5cx1r","_id":"cl87ud6jj000ovnud55282crk"},{"post_id":"cl87ud6jh000cvnud3jo6d054","category_id":"cl87ud6jc0004vnude2o3fmus","_id":"cl87ud6jj000rvnud79t3gpc7"},{"post_id":"cl87ud6ji000gvnudh0hhhez2","category_id":"cl87ud6jc0004vnude2o3fmus","_id":"cl87ud6jk000tvnud0fc5f8kl"},{"post_id":"cl87ud6jd0006vnud3mp22bfo","category_id":"cl87ud6jh000evnud1lbca6yv","_id":"cl87ud6jk000vvnud75t48vkj"}],"PostTag":[{"post_id":"cl87ud6j80001vnudbsih1lu9","tag_id":"cl87ud6jd0005vnudhsyt5cen","_id":"cl87ud6ji000ivnudgzb7d7j9"},{"post_id":"cl87ud6j80001vnudbsih1lu9","tag_id":"cl87ud6jg000avnud24k48ju3","_id":"cl87ud6jj000kvnudeuf3fnje"},{"post_id":"cl87ud6jh000cvnud3jo6d054","tag_id":"cl87ud6jd0005vnudhsyt5cen","_id":"cl87ud6jj000nvnudc41d2azv"},{"post_id":"cl87ud6jh000cvnud3jo6d054","tag_id":"cl87ud6jg000avnud24k48ju3","_id":"cl87ud6jj000pvnud5j1k2s4h"},{"post_id":"cl87ud6ji000gvnudh0hhhez2","tag_id":"cl87ud6jh000fvnude8ni2xse","_id":"cl87ud6jj000svnud9wgd8aat"},{"post_id":"cl87ud6jb0003vnudb1kbefbc","tag_id":"cl87ud6jh000fvnude8ni2xse","_id":"cl87ud6jk000uvnud42age1i1"},{"post_id":"cl87ud6jb0003vnudb1kbefbc","tag_id":"cl87ud6jj000lvnud3of43ls2","_id":"cl87ud6jk000xvnud3s9n3958"},{"post_id":"cl87ud6jd0006vnud3mp22bfo","tag_id":"cl87ud6jj000qvnudf9etcfcg","_id":"cl87ud6jl000yvnudcpm87x4a"},{"post_id":"cl87ud6je0007vnudfe4678vu","tag_id":"cl87ud6jh000fvnude8ni2xse","_id":"cl87ud6jl0010vnudc0g5ac8e"},{"post_id":"cl87ud6jf0008vnudap8regcc","tag_id":"cl87ud6jl000zvnuddvpyfpcd","_id":"cl87ud6jm0014vnud7xmscr5g"},{"post_id":"cl87ud6jf0008vnudap8regcc","tag_id":"cl87ud6jl0011vnuded5v3645","_id":"cl87ud6jm0015vnud9itjggvx"},{"post_id":"cl87ud6jf0008vnudap8regcc","tag_id":"cl87ud6jl0012vnudb7t2dojb","_id":"cl87ud6jm0017vnudf7t0b9su"},{"post_id":"cl87ud6jg000bvnud0hsddywk","tag_id":"cl87ud6jh000fvnude8ni2xse","_id":"cl87ud6jn0018vnud6u5a6zst"},{"post_id":"cl87ud6jg000bvnud0hsddywk","tag_id":"cl87ud6jj000lvnud3of43ls2","_id":"cl87ud6jn0019vnud2iwp9pub"}],"Tag":[{"name":"Java","_id":"cl87ud6jd0005vnudhsyt5cen"},{"name":"Multithreading","_id":"cl87ud6jg000avnud24k48ju3"},{"name":"Python","_id":"cl87ud6jh000fvnude8ni2xse"},{"name":"Linux","_id":"cl87ud6jj000lvnud3of43ls2"},{"name":"LaTeX","_id":"cl87ud6jj000qvnudf9etcfcg"},{"name":"concurrent system","_id":"cl87ud6jl000zvnuddvpyfpcd"},{"name":"C","_id":"cl87ud6jl0011vnuded5v3645"},{"name":"operating system","_id":"cl87ud6jl0012vnudb7t2dojb"}]}}